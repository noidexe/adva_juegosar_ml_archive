{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"WELCOME_MSG"}]},{"resourceType":"PHOTO","capabilities":[{"name":"READ"},{"name":"UPLOAD"},{"name":"UPLOADTEMP"}]},{"resourceType":"FILE","capabilities":[{"name":"READ"},{"name":"CREATE"}]},{"resourceType":"MEMBER","capabilities":[{"name":"READ"}]},{"resourceType":"LINK","capabilities":[{"name":"CREATE"},{"name":"READ"}]},{"resourceType":"CALENDAR","capabilities":[{"name":"READ"}]},{"resourceType":"DATABASE","capabilities":[{"name":"READ_DATA"},{"name":"READ"},{"name":"CREATE"}]},{"resourceType":"POLL","capabilities":[{"name":"READ"},{"name":"VOTE"},{"name":"CREATE"}]},{"resourceType":"MESSAGE","capabilities":[{"name":"CREATE"},{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[{"name":"READ"},{"name":"UPLOAD"}]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[{"name":"READ"}]},{"resourceType":"POST","capabilities":[{"name":"READ"},{"name":"CREATE"}]},{"resourceType":"PIN","capabilities":[{"name":"DELETE"},{"name":"READ"},{"name":"UPDATE"},{"name":"CREATE"}]}],"subStatus":"NORMAL","groupUrl":"ar.groups.yahoo.com","intlCode":"ar"},"comscore":"pageview_candidate","ygData":{"userId":117964770,"authorName":"Javier F. Otaegui","from":"&quot;Javier F. Otaegui&quot; &lt;javier@...&gt;","replyTo":"LIST","senderId":"4pAqFel9hPHt1gtMbONgxwHeH_JNAwmFY2XYHf5DG4LYZHR1dF8QIFl7WnjfAXJ4nz4LExScXmZop7Qc-8orBssUy567F9v5vDtcwvCLCCo","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [ADVA] RE: interfases adaptables din\u0010","postDate":"1030367963","msgId":5347,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDAwMjIwMWMyNGQwMyQzNWY4NDk2MCQ0MjYzYThjMEBzYWJhcmFzYS5raz4=","referencesHeader":"PDIwMDIwODE3MDIzOTExLjYyNzMucW1haWxAd2ViMTQ0MTAubWFpbC55YWhvby5jb20+PE9FNTNDNG9uMFlrS2xNSnIwblMwMDAwNTcxY0Bob3RtYWlsLmNvbT48MjAwMjA4MjEwMjAyMTMuNDZhMzI1MGQubmFodUBzb2Z0aG9tZS5uZXQ+PDAwMWEwMWMyNGNiZCQzOTRlZjE0MCQ2OTEwMjljOEBNSUNST1NPRlQ+IDwyMDAyMDgyNjAyMzg0Ny4zOTk3NDNmZS5uYWh1QHNvZnRob21lLm5ldD4="},"prevInTopic":0,"nextInTopic":5349,"prevInTime":5346,"nextInTime":5348,"topicId":5347,"numMessagesInTopic":8,"msgSnippet":"muy interesante....... sin lugar a dudas el binding dinámico es muy poderoso, como así también lo sería poder hacer el codigo reentrante (no se el termino","rawEmail":"Return-Path: &lt;javier@...&gt;\r\nX-Sender: javier@...\r\nX-Apparently-To: JuegosAR@...\r\nReceived: (EGP: mail-8_1_0_1); 26 Aug 2002 13:12:43 -0000\r\nReceived: (qmail 20313 invoked from network); 26 Aug 2002 13:12:42 -0000\r\nReceived: from unknown (66.218.66.217)\n  by m8.grp.scd.yahoo.com with QMQP; 26 Aug 2002 13:12:42 -0000\r\nReceived: from unknown (HELO mail.fibertel.com.ar) (24.232.0.78)\n  by mta2.grp.scd.yahoo.com with SMTP; 26 Aug 2002 13:12:42 -0000\r\nReceived: from javier (24.232.44.17) by mail.fibertel.com.ar (5.5.034)\n        id 3D6991260000DD3A for JuegosAR@...; Mon, 26 Aug 2002 10:15:20 -0300\r\nMessage-ID: &lt;002201c24d03$35f84960$4263a8c0@...&gt;\r\nTo: &lt;JuegosAR@...&gt;\r\nReferences: &lt;20020817023911.6273.qmail@...&gt;&lt;OE53C4on0YkKlMJr0nS0000571c@...&gt;&lt;20020821020213.46a3250d.nahu@...&gt;&lt;001a01c24cbd$394ef140$691029c8@MICROSOFT&gt; &lt;20020826023847.399743fe.nahu@...&gt;\r\nSubject: =?iso-8859-1?Q?Re:_=5BADVA=5D_RE:_interfases_adaptables_din=10?=\r\nDate: Mon, 26 Aug 2002 10:19:23 -0300\r\nMIME-Version: 1.0\r\nContent-Type: text/plain;\n\tcharset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: 8bit\r\nX-Priority: 3\r\nX-MSMail-Priority: Normal\r\nX-Mailer: Microsoft Outlook Express 6.00.2600.0000\r\nX-MimeOLE: Produced By Microsoft MimeOLE V6.00.2600.0000\r\nFrom: &quot;Javier F. Otaegui&quot; &lt;javier@...&gt;\r\nX-Yahoo-Group-Post: member; u=117964770\r\n\r\nmuy interesante....... sin lugar a dudas el binding din�mico es muy\npoderoso, como as� tambi�n lo ser�a poder hacer el codigo reentrante (no se\nel termino exacto) en el sentido de poder llamar a una funci�n que reciba un\nstring y corra eso (programaci�n din�mica?)\n\nSoporta el Python esto? Porque si lo soporta es entonces MUY poderoso y me\nvoy a tener que callar la boca y darte la raz�n.....\n\nPor supuesto que siempre est� el tema de cuanta performance se pierde al\ninterpretar codigo (y encima din�mico). Me sorprendi� leer el art�culo de\nUnreal y ver que cosas que se llaman todo el tiempo intensivamente est�n\nscripteadas.\n\nUna �ltima pregunta: Python vs Lua? Cual es la diferencia? ventajas de una\nsobre otra o no?\n\n\n----- Original Message -----\nFrom: &quot;Nahuel Greco&quot; &lt;nahu@...&gt;\nTo: &lt;JuegosAR@...&gt;\nSent: Monday, August 26, 2002 2:38 AM\nSubject: Re: [ADVA] RE: interfases adaptables din\u0010\n\n\n&gt; On Sun, 25 Aug 2002 21:56:45 -0700\n&gt; &quot;Ale Palmero&quot; &lt;apalmero@...&gt; wrote:\n&gt;\n&gt; &gt; A la vez termin� de leer Code complete y mi gran\n&gt; &gt; duda es si todo esto ( adaptadores entre componentes, proxies,\ndelegacion,\n&gt; &gt; jerarquias din�micas ) se aplica a los juegos hoy dia.\n&gt; &gt; No hace mucho que Carmack predicaba en contra de c++ y que la herencia\n&gt; &gt; multiple por ejemplo era mala palabra.\n&gt; &gt;\n&gt; &gt; Segun parece, directx lo est� usando pero no termino de convencerme....\n&gt; &gt;\n&gt;\n&gt; No le des demasiada bola a Carmack en lo relativo a arquitectura de\nSoftware\n&gt; (en gral), es mejor en ese campo leer a gente como Martin Fowler o Kent\nBeck.\n&gt; Esta bien criticar a C++, pero no tiene mucho sentido cuando la critica\n&gt; apunta a idolatrar a C :)\n&gt;\n&gt; &lt;NIGHTLY-PRO-DYNAMIC-LANGUAGES-RANT&gt;\n&gt;\n&gt; Con respecto a tu gran duda, justamente, IMHO uno de los problemas para la\n&gt; aplicaci�n de esas t�cnicas en games, es que los games se suelen hacer en\nC++,\n&gt; y C++ es a pain in the ass en la mayor�a de los casos (flames a mi!). Por\n&gt; ejemplo, no es lo mismo hacer un Proxy asi:\n&gt;\n&gt;     class Casita {\n&gt;         int        num_paredes;\n&gt;         bool       made_of_chocolate;\n&gt;     public:\n&gt;         Casita()   { (...) }\n&gt;         ~Casita()  { (...) }\n&gt;         dibujar()  { (...) }\n&gt; romper()   { (...) }\n&gt;         hacerla_de_chocolate() { (...) }\n&gt;     };\n&gt;\n&gt;     // Notar que me tengo que tomar todo el trabajo de transcribir\n&gt;     // metodo por metodo en el proxy:\n&gt;     class ProxyACasita {\n&gt;         Casita *casita;\n&gt;     public:\n&gt;         Casita() { casita = new Casita(); } // inicializado aqui para\n&gt;                                             // simplificar\n&gt;         ~Casita() { delete casita; }\n&gt;         dibujar() {\n&gt;                     casita-&gt;dibujar()\n&gt;                     }\n&gt;         romper() {\n&gt;                     casita-&gt;romper()\n&gt;                     }\n&gt;         hacerla_de_chocolate() {\n&gt;                         casita-&gt;hacerla_de_chocolate()\n&gt;                     }\n&gt;     };\n&gt;\n&gt; Que hacerlo as� (python):\n&gt;\n&gt;     class Casita:\n&gt;         def __init__(self):\n&gt;             self.num_paredes = 2\n&gt;             self.made_of_chocolate = 2\n&gt;         def dibujar(self):\n&gt;                 print &quot;Dibujada&quot;\n&gt;         def romper(self):\n&gt;                 (...)\n&gt;         def hacerla_de_chocolate:\n&gt;                 (...)\n&gt;\n&gt;    class Autito:\n&gt;         def __init__(self):\n&gt;             (...)\n&gt;         def orientar(self, grados):\n&gt;                 print &quot;Orientado&quot;\n&gt;                 self.orientacion = grados\n&gt;\n&gt; # Ahora creo una clase Proxy --Generica--:\n&gt;\n&gt;     class DebugProxy:\n&gt;         def __init__(self,dest):\n&gt;             self.destinatario = dest\n&gt;         def __getattr__( self, mensaje):\n&gt;             # ejemplo de algo que podria hacer\n&gt;             print mensaje,&quot;fue llamado&quot;\n&gt;             return getattr( self.destinatario, mensaje )\n&gt;\n&gt; So, luego puedo hacer:\n&gt;\n&gt;     &gt;&gt;&gt; una_casita_lejana = DebugProxy(Casita())\n&gt;     &gt;&gt;&gt; una_casita_lejana.dibujar()\n&gt;     dibujar fue llamado\n&gt;     Dibujada\n&gt;     &gt;&gt;&gt; auto = DebugProxy(Autito())\n&gt;     &gt;&gt;&gt; auto.orientar(3)\n&gt;     orientar fue llamado\n&gt;     Orientado\n&gt;     &gt;&gt;&gt;\n&gt;\n&gt; Not� que la clase &quot;DebugProxy&quot; es gen�rica, solo tuve que hacerla una vez\n&gt; para cualquier clase en la que la quiera aplicar. Tampoco tuve que tomarme\n&gt; el trabajo de copiar (ni mantener a trav�s de las versiones) toda la\ninterfaz\n&gt; de la clase a la que le quiero proxy&#39;ear las instancias. La interfaz del\n&gt; proxy se adapta a cualquier m�todo nuevo que le agregue a Casita o Autito.\n&gt; No es nada magico ni un caso especial, es natural de pensar que uno puede\n&gt; crear un objeto que simplemente le tira todos los mensajes que le mandan\n&gt; a �l a otro objeto. Que C++ no soporte naturalmente eso es problema de �l\n:)\n&gt;\n&gt; Siguiendo con esto, pensa en la dificultad inherente a C++ para usar\nProxys con\n&gt; objetos que son remotos (est�n en otra m�quina), y a los que no le conoces\nla\n&gt; interfaz por adelantado. No es imposible, pero hay que laburarlo, y no te\nva a\n&gt; quedar elegante, cuando en un lenguaje din�mico no son m�s de 15 lineas de\n&gt; code. So, son los limites del C++, COM+ es solo un intento por emparchar\nesos\n&gt; downsides del lenguaje.\n&gt;\n&gt; Obviamente, cuando codeemos C++, no porque sea m�s dif�cil/trabajoso vamos\na\n&gt; dejar de &#39;aplicar&#39;, conscientemente o no, los design patterns. Design\npatterns\n&gt; que originalmente fueron pensados en Smalltalk para formalizar y dar un\n&gt; vocabulario a cosas que ya se ven�an haciendo (la implementaci�n de un\nProxy en\n&gt; ST es &#39;similar&#39; a la que puse anteriormente en py, en el sentido que es\n&gt; &#39;dinamica&#39;/natural). Usarlos en C++ es como intentar encastrar un cubo de\n&gt; hierro en un agujero cilindrico, pero hay que hacerlo aunque quede todo\nroto\n&gt; y feo. Mientras que con los lenguajes din�micos no tenemos un cilindro\nsino\n&gt; una pelota, pero es de plastilina :)\n&gt;\n&gt; So, de usar C++, IMHO hay que intentar minimizar su uso y aplicarlo solo\npara\n&gt; lowlevel, y arriba un lenguaje &#39;de scripting&#39;/dinamico.\n&gt;\n&gt; En cuanto a la herencia m�ltiple, el problema conceptual t�pico con el que\nte\n&gt; podes encontrar es:\n&gt;\n&gt;      Humano\n&gt;      /    &#92;\n&gt;   Mujer    Hombre\n&gt;     &#92;       /\n&gt;    Hemafrodita\n&gt;\n&gt; (Nota, con H.M. el grafo de herencia se te puede complicar mucho m�s, este\nes\n&gt; un ejemplo simple, sin H.M. tenes la seguridad de que siempre es un tree)\n&gt;\n&gt; F�jate, seg�n ese gr�fico, tanto una Mujer como un Hombre son Humanos, el\n&gt; Hemafrodita tambi�n lo es, pero en una instancia de Hemafrodita, tenemos\nque\n&gt; mantener una o dos instancias de Humano? en este caso se podr�a resolver\n&gt; manteniendo una sola instancia, pero hay otros casos en donde tenemos que\n&gt; guardar dos instancias de la primera clase:\n&gt;\n&gt;             Empleado\n&gt;              /   &#92;\n&gt;           Mozo   Programador\n&gt;             &#92;     /\n&gt;     ArgentinoQueNoLlegaAFinDeMes\n&gt;\n&gt; En este caso, Empleado podr�a tener una variable que sea\n&quot;lugar_de_trabajo&quot;,\n&gt; un Mozo tiene un lugar de trabajo y se lo setea al Empleado, lo mismo un\n&gt; Programador a Sueldo, pero que pasa con el tipo que tiene dos laburos, el\n&gt; ArgentinoQueNoLlegaAFinDeMes ? Si tiene una sola instancia de Empleado,\n&gt; entonces va a haber conflicto, en este caso se precisan dos instancias de\n&gt; Empleado. (Obviamente, esto se podr�a haber armado de otra manera)\n&gt;\n&gt; As� que para dos formas iguales de herencia, conceptualmente no tenemos\n&gt; una �nica soluci�n para el problema de cuantas instancias de la primera\n&gt; clase debemos guardar, depende del caso.\n&gt;\n&gt; Adem�s, existe otro problema, y es (en el primer ejemplo), que pasa si\nhago\n&gt; Hemafrodita.mear()? tiene que mear parado o sentado? Tanto Mujer como\nHombre\n&gt; implementan mear() (&#39;virtual&#39; o no en Persona), pero cual tengo que usar\nen\n&gt; este caso? Nuevamente, para una misma forma de herencia no hay\nconceptualmente\n&gt; un criterio automatico de resoluci�n, depende del caso especifico.\n&gt;\n&gt; Hasta donde conozco, los lenguajes intentan resolver esto de una de estas\n&gt; formas:\n&gt;\n&gt; 1- Directamente no permitiendo herencia m�ltiple\n&gt;\n&gt; 2- No permitiendo herencia m�ltiple pero proveyendo alg�n tipo de\nmecanismo\n&gt;    para sustituirla (adem�s de composici�n), como Categor�as /\n&gt;    Protocolos/Interfases (algo remotamente similar a las abstract base\n&gt;    classes de C++).\n&gt;\n&gt;    Ej, clase B hereda de A pero a la vez declara que soporta el protocolo\nC (\n&gt;    esto es, una instancia B puede recibir un conjunto C de mensajes\ndeterminado\n&gt;    ). El protocolo/interfase no define variables nuevas, solo una &#39;api&#39;.\n&gt;\n&gt; 3- Intentando linearizar el grafo de ancestros, con mayor o menor\n&gt;    cuidado/warnings sobre las ambig�edades (ej, CLOS). Seg�n el ejemplo\n&gt;    anterior, en Python:\n&gt;\n&gt;     class Humano:\n&gt;         def respirar(self):\n&gt;                 pass\n&gt;\n&gt;     class Mujer(Humano):\n&gt;         def mear(self):\n&gt;                 print &#39;sentada&#39;\n&gt;         def be_cute(self):\n&gt;                 pass\n&gt;\n&gt;     class Hombre(humano):\n&gt;         def programar(self):\n&gt;                 print &#39;se agrando adva y ni una mina&#39;\n&gt;         def mear(self):\n&gt;                 print &#39;parado&#39;\n&gt;\n&gt;     class Hemafrodita(Mujer,Hombre):\n&gt;         pass\n&gt;\n&gt;   Entonces:\n&gt;\n&gt;         &gt;&gt;&gt; rene = Hemafrodita()\n&gt;         &gt;&gt;&gt; rene.mear()\n&gt;         sentada\n&gt;         &gt;&gt;&gt;\n&gt;\n&gt;   Y si hubiese sido:\n&gt;\n&gt;     class Hemafrodita(Hombre,Mujer):\n&gt;         pass\n&gt;\n&gt;     &gt;&gt;&gt; rene = Hemafrodita()\n&gt;     &gt;&gt;&gt; rene.mear()\n&gt;     parado\n&gt;     &gt;&gt;&gt;\n&gt;\n&gt;   Lo que pasa aqui es que &#39;linealiza&#39; el arbol de herencia, d�ndole\n&gt;   m�s prioridad a lo que se especifico primero al declarar los ancestros\n&gt;   de cada clase. En el segundo caso, la resoluci�n de mensajes queda as�:\n&gt;\n&gt;     Hemafrodita-&gt;Hombre-&gt;Mujer-&gt;Humano\n&gt;\n&gt;   Y por definicion se guarda una sola instancia de Humano.\n&gt;\n&gt; Igualmente con los lenguajes que no son fuertemente tipados / que usan\ndynamic\n&gt; binding, este problema es un poco bastante menos grave, ya que se puede\nusar\n&gt; composicion en vez de H.M. en una mayor cantidad de casos. No se precisa\n&gt; declarar a un objeto de una determinada clase para poder mandarle un\nmensaje X.\n&gt;\n&gt; So, IMHO en C++ es conveniente no usar H.M. salvo en muy especiales casos,\n&gt; y en los cuales hay que intentar que sea con abstract base classes.\n&gt;\n&gt; &lt;/RANT&gt;\n&gt;\n&gt; Ahh.. me desahogu� :)\n&gt;\n&gt;\n&gt; - Nahuel Greco            Web Development - Open Source -\n&gt; - http://www.codenix.com  Game Programming - Research   -\n&gt; - Coding / sysadmin       Networking. The answer is 42. -\n&gt;\n&gt; ADVA - Asociaci�n de Desarrolladores de Videojuegos Argentina.\n&gt;\n&gt; www.adva.com.ar\n&gt; -------------------------------------------------------.\n&gt;\n&gt;\n&gt;\n&gt; Tu uso de Yahoo! Grupos est� sujeto a las\nhttp://ar.docs.yahoo.com/info/utos.html\n&gt;\n&gt;\n\n\n"}}