{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"WELCOME_MSG"}]},{"resourceType":"PHOTO","capabilities":[{"name":"READ"},{"name":"UPLOAD"},{"name":"UPLOADTEMP"}]},{"resourceType":"FILE","capabilities":[{"name":"READ"},{"name":"CREATE"}]},{"resourceType":"MEMBER","capabilities":[{"name":"READ"}]},{"resourceType":"LINK","capabilities":[{"name":"CREATE"},{"name":"READ"}]},{"resourceType":"CALENDAR","capabilities":[{"name":"READ"}]},{"resourceType":"DATABASE","capabilities":[{"name":"CREATE"},{"name":"READ"},{"name":"READ_DATA"}]},{"resourceType":"POLL","capabilities":[{"name":"READ"},{"name":"VOTE"},{"name":"CREATE"}]},{"resourceType":"MESSAGE","capabilities":[{"name":"CREATE"},{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[{"name":"READ"},{"name":"UPLOAD"}]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[{"name":"READ"}]},{"resourceType":"POST","capabilities":[{"name":"CREATE"},{"name":"READ"}]},{"resourceType":"PIN","capabilities":[{"name":"CREATE"},{"name":"DELETE"},{"name":"READ"},{"name":"UPDATE"}]}],"subStatus":"NORMAL","groupUrl":"ar.groups.yahoo.com","intlCode":"ar"},"comscore":"pageview_candidate","ygData":{"userId":41248034,"authorName":"Ale Palmero","from":"&quot;Ale Palmero&quot; &lt;apalmero@...&gt;","profile":"listaqueso","replyTo":"LIST","senderId":"hVTqsdEvQ4PhwHG6yxi_yu4IAsmVpXn66Ci1OIbhSIjsDw9R9UxHZZgjeYmO4fe13bupM679jLt-q7cJLyqgfgmpgIJJgA8jNRDt-g","spamInfo":{"isSpam":false,"reason":"0"},"subject":"lenguajes interpretados.","postDate":"1030428853","msgId":5354,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDAwN2UwMWMyNGQ5MCRmYTM2N2VlMCQ2NDEwMjljOEBNSUNST1NPRlQ+","referencesHeader":"PDIwMDIwODE3MDIzOTExLjYyNzMucW1haWxAd2ViMTQ0MTAubWFpbC55YWhvby5jb20+PE9FNTNDNG9uMFlrS2xNSnIwblMwMDAwNTcxY0Bob3RtYWlsLmNvbT48MjAwMjA4MjEwMjAyMTMuNDZhMzI1MGQubmFodUBzb2Z0aG9tZS5uZXQ+PDAwMWEwMWMyNGNiZCQzOTRlZjE0MCQ2OTEwMjljOEBNSUNST1NPRlQ+IDwyMDAyMDgyNjAyMzg0Ny4zOTk3NDNmZS5uYWh1QHNvZnRob21lLm5ldD4gPDAwMjIwMWMyNGQwMyQzNWY4NDk2MCQ0MjYzYThjMEBzYWJhcmFzYS5raz4="},"prevInTopic":0,"nextInTopic":5359,"prevInTime":5353,"nextInTime":5355,"topicId":5354,"numMessagesInTopic":2,"msgSnippet":"Muy interesante el ejemplo de python de Nahuel. (aunque no manejo el lenguaje) Lo que sabia es que hay un programita que tomando los .h  de tu programa, genera","rawEmail":"Return-Path: &lt;apalmero@...&gt;\r\nX-Sender: apalmero@...\r\nX-Apparently-To: JuegosAR@...\r\nReceived: (EGP: mail-8_1_0_1); 27 Aug 2002 02:13:09 -0000\r\nReceived: (qmail 36732 invoked from network); 27 Aug 2002 02:13:08 -0000\r\nReceived: from unknown (66.218.66.218)\n  by m11.grp.scd.yahoo.com with QMQP; 27 Aug 2002 02:13:08 -0000\r\nReceived: from unknown (HELO smtp5) (200.31.1.19)\n  by mta3.grp.scd.yahoo.com with SMTP; 27 Aug 2002 02:13:07 -0000\r\nReceived: from MARTA (200-41-16-100-rdurafd1.impsat.net.ar [200.41.16.100])\n\tby smtp5 (8.9.3/8.9.3) with SMTP id WAA13759\n\tfor &lt;JuegosAR@...&gt;; Mon, 26 Aug 2002 22:59:37 +0300 (GMT)\r\nMessage-ID: &lt;007e01c24d90$fa367ee0$641029c8@MICROSOFT&gt;\r\nTo: &lt;JuegosAR@...&gt;\r\nReferences: &lt;20020817023911.6273.qmail@...&gt;&lt;OE53C4on0YkKlMJr0nS0000571c@...&gt;&lt;20020821020213.46a3250d.nahu@...&gt;&lt;001a01c24cbd$394ef140$691029c8@MICROSOFT&gt; &lt;20020826023847.399743fe.nahu@...&gt; &lt;002201c24d03$35f84960$4263a8c0@...&gt;\r\nSubject: lenguajes interpretados.\r\nDate: Mon, 26 Aug 2002 23:14:13 -0700\r\nMIME-Version: 1.0\r\nContent-Type: multipart/alternative;\n\tboundary=&quot;----=_NextPart_000_007B_01C24D56.4AB1FCE0&quot;\r\nX-Priority: 3\r\nX-MSMail-Priority: Normal\r\nX-Mailer: Microsoft Outlook Express 5.00.2014.211\r\nX-MimeOLE: Produced By Microsoft MimeOLE V5.00.2014.211\r\nFrom: &quot;Ale Palmero&quot; &lt;apalmero@...&gt;\r\nX-Yahoo-Group-Post: member; u=41248034\r\nX-Yahoo-Profile: listaqueso\r\n\r\n\r\n------=_NextPart_000_007B_01C24D56.4AB1FCE0\r\nContent-Type: text/plain;\n\tcharset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nMuy interesante el ejemplo de python de Nahuel. (aunque no manejo el lengua=\r\nje)\nLo que sabia es que hay un programita que tomando los .h  de tu program=\r\na, genera codigo automatico para acceder a tus funciones y variables desde =\r\nel interprete de python (que embebiste en tu juego) logrando as=ED scriptin=\r\ng din=E1mico en phyton. Ejemplo: le pasas el .h de opengl y te genera codig=\r\no como para ir probando comandos opengl desde una consola.\nNo se que tan bi=\r\nen andar=E1 con .h de c++. Ni me acuerdo el nombre pero lo tengo en un cd, =\r\nsi a alguien le interesa la busco. Lo vi implementado en un engine open sou=\r\nrce de aventuras graficas que se llama robot\n\nPara hacer lo mismo (lo de co=\r\nrrer un string, o un archivo de texto con codigo) pero de c++\nhay un interp=\r\nrete gratuito embebible en tu juego que se llama CINT. Interpreta un 90% de=\r\nl lenguaje c++ y es tan robusto como para ejecutarse interpretando su propi=\r\no c=F3digo ( tiene como 10 a=F1os de desarrollo ya creo) Es lo mejor que vi=\r\n como para incorporar scripting a un engine propio.\n\nSobre unrealscript, to=\r\ndo el gameplay de Unreal y de los juegos que usan el motor esta en UScript,=\r\n aunque lo mas pesado esta en clases nativas compiladas en c/c++ heredables=\r\n desde UScript.\nUscript es precompilado igualmente y dice el creador que co=\r\nrre 20 veces mas lento (creo) por lo que recomienda programar solo eventos =\r\ny respuestas a estos (no fisica por ejemplo). Es igual a c++ pero incorpora=\r\n cosas para los juegos como estados, operadores como DOT para sacar dotprod=\r\nuct entre dos vectors etc.. \n\nNunca escuch=E9 hablar de &quot;lenguajes din=E1mi=\r\ncos&quot;, comentate algo m=E1s\n\n----- Original Message ----- \nFrom: Javier F. O=\r\ntaegui &lt;javier@...&gt;\nTo: &lt;JuegosAR@...&gt;\nSent: Monday=\r\n, August 26, 2002 6:19 AM\nSubject: Re: [ADVA] RE: interfases adaptables din=\r\n=10\n\n\n&gt; muy interesante....... sin lugar a dudas el binding din=E1mico es m=\r\nuy\n&gt; poderoso, como as=ED tambi=E9n lo ser=EDa poder hacer el codigo reentr=\r\nante (no se\n&gt; el termino exacto) en el sentido de poder llamar a una funci=\r\n=F3n que reciba un\n&gt; string y corra eso (programaci=F3n din=E1mica?)\n&gt; \n&gt; S=\r\noporta el Python esto? Porque si lo soporta es entonces MUY poderoso y me\n&gt;=\r\n voy a tener que callar la boca y darte la raz=F3n.....\n&gt; \n&gt; Por supuesto q=\r\nue siempre est=E1 el tema de cuanta performance se pierde al\n&gt; interpretar =\r\ncodigo (y encima din=E1mico). Me sorprendi=F3 leer el art=EDculo de\n&gt; Unrea=\r\nl y ver que cosas que se llaman todo el tiempo intensivamente est=E1n\n&gt; scr=\r\nipteadas.\n&gt; \n&gt; Una =FAltima pregunta: Python vs Lua? Cual es la diferencia?=\r\n ventajas de una\n&gt; sobre otra o no?\n&gt; \n&gt; \n&gt; ----- Original Message -----\n&gt; =\r\nFrom: &quot;Nahuel Greco&quot; &lt;nahu@...&gt;\n&gt; To: &lt;JuegosAR@...=\r\n&gt;\n&gt; Sent: Monday, August 26, 2002 2:38 AM\n&gt; Subject: Re: [ADVA] RE: interfa=\r\nses adaptables din=10\n&gt; \n&gt; \n&gt; &gt; On Sun, 25 Aug 2002 21:56:45 -0700\n&gt; &gt; &quot;Ale=\r\n Palmero&quot; &lt;apalmero@...&gt; wrote:\n&gt; &gt;\n&gt; &gt; &gt; A la vez termin=E9 de le=\r\ner Code complete y mi gran\n&gt; &gt; &gt; duda es si todo esto ( adaptadores entre c=\r\nomponentes, proxies,\n&gt; delegacion,\n&gt; &gt; &gt; jerarquias din=E1micas ) se aplica=\r\n a los juegos hoy dia.\n&gt; &gt; &gt; No hace mucho que Carmack predicaba en contra =\r\nde c++ y que la herencia\n&gt; &gt; &gt; multiple por ejemplo era mala palabra.\n&gt; &gt; &gt;=\r\n\n&gt; &gt; &gt; Segun parece, directx lo est=E1 usando pero no termino de convencerm=\r\ne....\n&gt; &gt; &gt;\n&gt; &gt;\n&gt; &gt; No le des demasiada bola a Carmack en lo relativo a arq=\r\nuitectura de\n&gt; Software\n&gt; &gt; (en gral), es mejor en ese campo leer a gente c=\r\nomo Martin Fowler o Kent\n&gt; Beck.\n&gt; &gt; Esta bien criticar a C++, pero no tien=\r\ne mucho sentido cuando la critica\n&gt; &gt; apunta a idolatrar a C :)\n&gt; &gt;\n&gt; &gt; &lt;NI=\r\nGHTLY-PRO-DYNAMIC-LANGUAGES-RANT&gt;\n&gt; &gt;\n&gt; &gt; Con respecto a tu gran duda, just=\r\namente, IMHO uno de los problemas para la\n&gt; &gt; aplicaci=F3n de esas t=E9cnic=\r\nas en games, es que los games se suelen hacer en\n&gt; C++,\n&gt; &gt; y C++ es a pain=\r\n in the ass en la mayor=EDa de los casos (flames a mi!). Por\n&gt; &gt; ejemplo, n=\r\no es lo mismo hacer un Proxy asi:\n&gt; &gt;\n&gt; &gt;     class Casita {\n&gt; &gt;         in=\r\nt        num_paredes;\n&gt; &gt;         bool       made_of_chocolate;\n&gt; &gt;     pub=\r\nlic:\n&gt; &gt;         Casita()   { (...) }\n&gt; &gt;         ~Casita()  { (...) }\n&gt; &gt; =\r\n        dibujar()  { (...) }\n&gt; &gt; romper()   { (...) }\n&gt; &gt;         hacerla_d=\r\ne_chocolate() { (...) }\n&gt; &gt;     };\n&gt; &gt;\n&gt; &gt;     // Notar que me tengo que to=\r\nmar todo el trabajo de transcribir\n&gt; &gt;     // metodo por metodo en el proxy=\r\n:\n&gt; &gt;     class ProxyACasita {\n&gt; &gt;         Casita *casita;\n&gt; &gt;     public:\n=\r\n&gt; &gt;         Casita() { casita =3D new Casita(); } // inicializado aqui para=\r\n\n&gt; &gt;                                             // simplificar\n&gt; &gt;        =\r\n ~Casita() { delete casita; }\n&gt; &gt;         dibujar() {\n&gt; &gt;                  =\r\n   casita-&gt;dibujar()\n&gt; &gt;                     }\n&gt; &gt;         romper() {\n&gt; &gt;  =\r\n                   casita-&gt;romper()\n&gt; &gt;                     }\n&gt; &gt;         h=\r\nacerla_de_chocolate() {\n&gt; &gt;                         casita-&gt;hacerla_de_choc=\r\nolate()\n&gt; &gt;                     }\n&gt; &gt;     };\n&gt; &gt;\n&gt; &gt; Que hacerlo as=ED (pyt=\r\nhon):\n&gt; &gt;\n&gt; &gt;     class Casita:\n&gt; &gt;         def __init__(self):\n&gt; &gt;        =\r\n     self.num_paredes =3D 2\n&gt; &gt;             self.made_of_chocolate =3D 2\n&gt; =\r\n&gt;         def dibujar(self):\n&gt; &gt;                 print &quot;Dibujada&quot;\n&gt; &gt;      =\r\n   def romper(self):\n&gt; &gt;                 (...)\n&gt; &gt;         def hacerla_de_c=\r\nhocolate:\n&gt; &gt;                 (...)\n&gt; &gt;\n&gt; &gt;    class Autito:\n&gt; &gt;         de=\r\nf __init__(self):\n&gt; &gt;             (...)\n&gt; &gt;         def orientar(self, grad=\r\nos):\n&gt; &gt;                 print &quot;Orientado&quot;\n&gt; &gt;                 self.orienta=\r\ncion =3D grados\n&gt; &gt;\n&gt; &gt; # Ahora creo una clase Proxy --Generica--:\n&gt; &gt;\n&gt; &gt; =\r\n    class DebugProxy:\n&gt; &gt;         def __init__(self,dest):\n&gt; &gt;             =\r\nself.destinatario =3D dest\n&gt; &gt;         def __getattr__( self, mensaje):\n&gt; &gt;=\r\n             # ejemplo de algo que podria hacer\n&gt; &gt;             print mensa=\r\nje,&quot;fue llamado&quot;\n&gt; &gt;             return getattr( self.destinatario, mensaje=\r\n )\n&gt; &gt;\n&gt; &gt; So, luego puedo hacer:\n&gt; &gt;\n&gt; &gt;     &gt;&gt;&gt; una_casita_lejana =3D Deb=\r\nugProxy(Casita())\n&gt; &gt;     &gt;&gt;&gt; una_casita_lejana.dibujar()\n&gt; &gt;     dibujar f=\r\nue llamado\n&gt; &gt;     Dibujada\n&gt; &gt;     &gt;&gt;&gt; auto =3D DebugProxy(Autito())\n&gt; &gt;  =\r\n   &gt;&gt;&gt; auto.orientar(3)\n&gt; &gt;     orientar fue llamado\n&gt; &gt;     Orientado\n&gt; &gt; =\r\n    &gt;&gt;&gt;\n&gt; &gt;\n&gt; &gt; Not=E1 que la clase &quot;DebugProxy&quot; es gen=E9rica, solo tuve q=\r\nue hacerla una vez\n&gt; &gt; para cualquier clase en la que la quiera aplicar. Ta=\r\nmpoco tuve que tomarme\n&gt; &gt; el trabajo de copiar (ni mantener a trav=E9s de =\r\nlas versiones) toda la\n&gt; interfaz\n&gt; &gt; de la clase a la que le quiero proxy&#39;=\r\near las instancias. La interfaz del\n&gt; &gt; proxy se adapta a cualquier m=E9tod=\r\no nuevo que le agregue a Casita o Autito.\n&gt; &gt; No es nada magico ni un caso =\r\nespecial, es natural de pensar que uno puede\n&gt; &gt; crear un objeto que simple=\r\nmente le tira todos los mensajes que le mandan\n&gt; &gt; a =E9l a otro objeto. Qu=\r\ne C++ no soporte naturalmente eso es problema de =E9l\n&gt; :)\n&gt; &gt;\n&gt; &gt; Siguiend=\r\no con esto, pensa en la dificultad inherente a C++ para usar\n&gt; Proxys con\n&gt;=\r\n &gt; objetos que son remotos (est=E1n en otra m=E1quina), y a los que no le c=\r\nonoces\n&gt; la\n&gt; &gt; interfaz por adelantado. No es imposible, pero hay que labu=\r\nrarlo, y no te\n&gt; va a\n&gt; &gt; quedar elegante, cuando en un lenguaje din=E1mico=\r\n no son m=E1s de 15 lineas de\n&gt; &gt; code. So, son los limites del C++, COM+ e=\r\ns solo un intento por emparchar\n&gt; esos\n&gt; &gt; downsides del lenguaje.\n&gt; &gt;\n&gt; &gt; =\r\nObviamente, cuando codeemos C++, no porque sea m=E1s dif=EDcil/trabajoso va=\r\nmos\n&gt; a\n&gt; &gt; dejar de &#39;aplicar&#39;, conscientemente o no, los design patterns. =\r\nDesign\n&gt; patterns\n&gt; &gt; que originalmente fueron pensados en Smalltalk para f=\r\normalizar y dar un\n&gt; &gt; vocabulario a cosas que ya se ven=EDan haciendo (la =\r\nimplementaci=F3n de un\n&gt; Proxy en\n&gt; &gt; ST es &#39;similar&#39; a la que puse anterio=\r\nrmente en py, en el sentido que es\n&gt; &gt; &#39;dinamica&#39;/natural). Usarlos en C++ =\r\nes como intentar encastrar un cubo de\n&gt; &gt; hierro en un agujero cilindrico, =\r\npero hay que hacerlo aunque quede todo\n&gt; roto\n&gt; &gt; y feo. Mientras que con l=\r\nos lenguajes din=E1micos no tenemos un cilindro\n&gt; sino\n&gt; &gt; una pelota, pero=\r\n es de plastilina :)\n&gt; &gt;\n&gt; &gt; So, de usar C++, IMHO hay que intentar minimiz=\r\nar su uso y aplicarlo solo\n&gt; para\n&gt; &gt; lowlevel, y arriba un lenguaje &#39;de sc=\r\nripting&#39;/dinamico.\n&gt; &gt;\n&gt; &gt; En cuanto a la herencia m=FAltiple, el problema =\r\nconceptual t=EDpico con el que\n&gt; te\n&gt; &gt; podes encontrar es:\n&gt; &gt;\n&gt; &gt;      Hu=\r\nmano\n&gt; &gt;      /    &#92;\n&gt; &gt;   Mujer    Hombre\n&gt; &gt;     &#92;       /\n&gt; &gt;    Hemafro=\r\ndita\n&gt; &gt;\n&gt; &gt; (Nota, con H.M. el grafo de herencia se te puede complicar muc=\r\nho m=E1s, este\n&gt; es\n&gt; &gt; un ejemplo simple, sin H.M. tenes la seguridad de q=\r\nue siempre es un tree)\n&gt; &gt;\n&gt; &gt; F=EDjate, seg=FAn ese gr=E1fico, tanto una M=\r\nujer como un Hombre son Humanos, el\n&gt; &gt; Hemafrodita tambi=E9n lo es, pero e=\r\nn una instancia de Hemafrodita, tenemos\n&gt; que\n&gt; &gt; mantener una o dos instan=\r\ncias de Humano? en este caso se podr=EDa resolver\n&gt; &gt; manteniendo una sola =\r\ninstancia, pero hay otros casos en donde tenemos que\n&gt; &gt; guardar dos instan=\r\ncias de la primera clase:\n&gt; &gt;\n&gt; &gt;             Empleado\n&gt; &gt;              /  =\r\n &#92;\n&gt; &gt;           Mozo   Programador\n&gt; &gt;             &#92;     /\n&gt; &gt;     Argenti=\r\nnoQueNoLlegaAFinDeMes\n&gt; &gt;\n&gt; &gt; En este caso, Empleado podr=EDa tener una var=\r\niable que sea\n&gt; &quot;lugar_de_trabajo&quot;,\n&gt; &gt; un Mozo tiene un lugar de trabajo y=\r\n se lo setea al Empleado, lo mismo un\n&gt; &gt; Programador a Sueldo, pero que pa=\r\nsa con el tipo que tiene dos laburos, el\n&gt; &gt; ArgentinoQueNoLlegaAFinDeMes ?=\r\n Si tiene una sola instancia de Empleado,\n&gt; &gt; entonces va a haber conflicto=\r\n, en este caso se precisan dos instancias de\n&gt; &gt; Empleado. (Obviamente, est=\r\no se podr=EDa haber armado de otra manera)\n&gt; &gt;\n&gt; &gt; As=ED que para dos forma=\r\ns iguales de herencia, conceptualmente no tenemos\n&gt; &gt; una =FAnica soluci=F3=\r\nn para el problema de cuantas instancias de la primera\n&gt; &gt; clase debemos gu=\r\nardar, depende del caso.\n&gt; &gt;\n&gt; &gt; Adem=E1s, existe otro problema, y es (en e=\r\nl primer ejemplo), que pasa si\n&gt; hago\n&gt; &gt; Hemafrodita.mear()? tiene que mea=\r\nr parado o sentado? Tanto Mujer como\n&gt; Hombre\n&gt; &gt; implementan mear() (&#39;virt=\r\nual&#39; o no en Persona), pero cual tengo que usar\n&gt; en\n&gt; &gt; este caso? Nuevame=\r\nnte, para una misma forma de herencia no hay\n&gt; conceptualmente\n&gt; &gt; un crite=\r\nrio automatico de resoluci=F3n, depende del caso especifico.\n&gt; &gt;\n&gt; &gt; Hasta =\r\ndonde conozco, los lenguajes intentan resolver esto de una de estas\n&gt; &gt; for=\r\nmas:\n&gt; &gt;\n&gt; &gt; 1- Directamente no permitiendo herencia m=FAltiple\n&gt; &gt;\n&gt; &gt; 2- =\r\nNo permitiendo herencia m=FAltiple pero proveyendo alg=FAn tipo de\n&gt; mecani=\r\nsmo\n&gt; &gt;    para sustituirla (adem=E1s de composici=F3n), como Categor=EDas =\r\n/\n&gt; &gt;    Protocolos/Interfases (algo remotamente similar a las abstract bas=\r\ne\n&gt; &gt;    classes de C++).\n&gt; &gt;\n&gt; &gt;    Ej, clase B hereda de A pero a la vez =\r\ndeclara que soporta el protocolo\n&gt; C (\n&gt; &gt;    esto es, una instancia B pued=\r\ne recibir un conjunto C de mensajes\n&gt; determinado\n&gt; &gt;    ). El protocolo/in=\r\nterfase no define variables nuevas, solo una &#39;api&#39;.\n&gt; &gt;\n&gt; &gt; 3- Intentando l=\r\ninearizar el grafo de ancestros, con mayor o menor\n&gt; &gt;    cuidado/warnings =\r\nsobre las ambig=FCedades (ej, CLOS). Seg=FAn el ejemplo\n&gt; &gt;    anterior, en=\r\n Python:\n&gt; &gt;\n&gt; &gt;     class Humano:\n&gt; &gt;         def respirar(self):\n&gt; &gt;     =\r\n            pass\n&gt; &gt;\n&gt; &gt;     class Mujer(Humano):\n&gt; &gt;         def mear(self=\r\n):\n&gt; &gt;                 print &#39;sentada&#39;\n&gt; &gt;         def be_cute(self):\n&gt; &gt;  =\r\n               pass\n&gt; &gt;\n&gt; &gt;     class Hombre(humano):\n&gt; &gt;         def progr=\r\namar(self):\n&gt; &gt;                 print &#39;se agrando adva y ni una mina&#39;\n&gt; &gt;  =\r\n       def mear(self):\n&gt; &gt;                 print &#39;parado&#39;\n&gt; &gt;\n&gt; &gt;     class=\r\n Hemafrodita(Mujer,Hombre):\n&gt; &gt;         pass\n&gt; &gt;\n&gt; &gt;   Entonces:\n&gt; &gt;\n&gt; &gt;   =\r\n      &gt;&gt;&gt; rene =3D Hemafrodita()\n&gt; &gt;         &gt;&gt;&gt; rene.mear()\n&gt; &gt;         se=\r\nntada\n&gt; &gt;         &gt;&gt;&gt;\n&gt; &gt;\n&gt; &gt;   Y si hubiese sido:\n&gt; &gt;\n&gt; &gt;     class Hemafr=\r\nodita(Hombre,Mujer):\n&gt; &gt;         pass\n&gt; &gt;\n&gt; &gt;     &gt;&gt;&gt; rene =3D Hemafrodita(=\r\n)\n&gt; &gt;     &gt;&gt;&gt; rene.mear()\n&gt; &gt;     parado\n&gt; &gt;     &gt;&gt;&gt;\n&gt; &gt;\n&gt; &gt;   Lo que pasa =\r\naqui es que &#39;linealiza&#39; el arbol de herencia, d=E1ndole\n&gt; &gt;   m=E1s priorid=\r\nad a lo que se especifico primero al declarar los ancestros\n&gt; &gt;   de cada c=\r\nlase. En el segundo caso, la resoluci=F3n de mensajes queda as=ED:\n&gt; &gt;\n&gt; &gt; =\r\n    Hemafrodita-&gt;Hombre-&gt;Mujer-&gt;Humano\n&gt; &gt;\n&gt; &gt;   Y por definicion se guarda=\r\n una sola instancia de Humano.\n&gt; &gt;\n&gt; &gt; Igualmente con los lenguajes que no =\r\nson fuertemente tipados / que usan\n&gt; dynamic\n&gt; &gt; binding, este problema es =\r\nun poco bastante menos grave, ya que se puede\n&gt; usar\n&gt; &gt; composicion en vez=\r\n de H.M. en una mayor cantidad de casos. No se precisa\n&gt; &gt; declarar a un ob=\r\njeto de una determinada clase para poder mandarle un\n&gt; mensaje X.\n&gt; &gt;\n&gt; &gt; S=\r\no, IMHO en C++ es conveniente no usar H.M. salvo en muy especiales casos,\n&gt;=\r\n &gt; y en los cuales hay que intentar que sea con abstract base classes.\n&gt; &gt;\n=\r\n&gt; &gt; &lt;/RANT&gt;\n&gt; &gt;\n&gt; &gt; Ahh.. me desahogu=E9 :)\n&gt; &gt;\n&gt; &gt;\n&gt; &gt; - Nahuel Greco     =\r\n       Web Development - Open Source -\n&gt; &gt; - http://www.codenix.com  Game P=\r\nrogramming - Research   -\n&gt; &gt; - Coding / sysadmin       Networking. The ans=\r\nwer is 42. -\n&gt; &gt;\n&gt; &gt; ADVA - Asociaci=F3n de Desarrolladores de Videojuegos =\r\nArgentina.\n&gt; &gt;\n&gt; &gt; www.adva.com.ar\n&gt; &gt; ------------------------------------=\r\n-------------------.\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt; Tu uso de Yahoo! Grupos est=E1 sujeto =\r\na las\n&gt; http://ar.docs.yahoo.com/info/utos.html\n&gt; &gt;\n&gt; &gt;\n&gt; \n&gt; \n&gt; ADVA - Asoc=\r\niaci=F3n de Desarrolladores de Videojuegos Argentina.\n&gt; \n&gt; www.adva.com.ar\n=\r\n&gt; -------------------------------------------------------.\n&gt; \n&gt;  \n&gt; \n&gt; Tu u=\r\nso de Yahoo! Grupos est=E1 sujeto a las http://ar.docs.yahoo.com/info/utos.=\r\nhtml \n&gt; \n\r\n------=_NextPart_000_007B_01C24D56.4AB1FCE0\r\nContent-Type: text/html;\n\tcharset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot;&gt;\n&lt;HTML&gt;&lt;HEAD&gt;=\r\n\n&lt;META content=3D&quot;text/html; charset=3Diso-8859-1&quot; http-equiv=3DContent-Typ=\r\ne&gt;\n&lt;META content=3D&quot;MSHTML 5.00.2014.210&quot; name=3DGENERATOR&gt;\n&lt;STYLE&gt;&lt;/STYLE&gt;=\r\n\n&lt;/HEAD&gt;\n&lt;BODY&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;Muy interesante el ejemplo=\r\n de python de Nahuel. \n(aunque no manejo el lenguaje)&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FO=\r\nNT face=3DArial size=3D2&gt;Lo que sabia es que hay un programita que tomando =\r\n\nlos .h&nbsp; de tu programa, genera codigo automatico para acceder a tus \n=\r\nfunciones y variables desde el interprete de python (que embebiste en tu ju=\r\nego) \nlogrando as=ED scripting din=E1mico en phyton. Ejemplo: le pasas el .=\r\nh de opengl y \nte genera codigo como para ir probando comandos opengl desde=\r\n una \nconsola.&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;No se que tan =\r\nbien andar=E1 con .h de c++. Ni me \nacuerdo el nombre pero lo tengo en un c=\r\nd, si a alguien le interesa la busco. Lo \nvi implementado en un engine open=\r\n source de aventuras graficas que se llama \nrobot&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;=\r\n/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;Para hacer lo mismo (&lt;STRONG&gt;lo de c=\r\norrer un \nstring, o un archivo de texto con codigo) pero de c++&lt;/STRONG&gt;&lt;/F=\r\nONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;hay un interprete gratuito embe=\r\nbible en tu juego \nque se llama CINT. Interpreta un 90% del lenguaje c++ y =\r\nes tan robusto como para \nejecutarse interpretando su propio c=F3digo ( tie=\r\nne como 10 a=F1os de desarrollo ya \ncreo) Es lo mejor que vi como para inco=\r\nrporar scripting a un engine \npropio.&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;=\r\nFONT face=3DArial size=3D2&gt;Sobre unrealscript, todo el gameplay de Unreal y=\r\n de \nlos juegos que usan el motor esta en UScript, aunque lo mas pesado est=\r\na en \nclases nativas&nbsp;compiladas en c/c++ heredables desde UScript.&lt;/FO=\r\nNT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;Uscript es precompilado igualmen=\r\nte y dice el \ncreador que corre 20 veces mas lento (creo) por lo que recomi=\r\nenda programar \nsolo&nbsp;eventos y respuestas a estos (no fisica por ejemp=\r\nlo). Es igual a c++ \npero incorpora cosas para los juegos como estados, ope=\r\nradores como DOT para \nsacar dotproduct entre dos vectors etc.. &lt;/FONT&gt;&lt;/DI=\r\nV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;Nunca escuch=E9 habla=\r\nr de&nbsp;&quot;lenguajes din=E1micos&quot;, \ncomentate algo m=E1s&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;=\r\n&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;----- Original Message ----- =\r\n&lt;/FONT&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;From: Javier F. Otaegui &lt;&lt;A \nhr=\r\nef=3D&quot;mailto:javier@...&quot;&gt;javier@...&lt;/A&gt;&gt;&lt;/FONT&gt;&lt;/DIV&gt;\n=\r\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;To: &lt;&lt;A \nhref=3D&quot;mailto:JuegosAR@grupos=\r\nyahoo.com.ar&quot;&gt;JuegosAR@...&lt;/A&gt;&gt;&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT f=\r\nace=3DArial size=3D2&gt;Sent: Monday, August 26, 2002 6:19 AM&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DI=\r\nV&gt;&lt;FONT face=3DArial size=3D2&gt;Subject: Re: [ADVA] RE: interfases adaptables=\r\n \ndin=10&lt;/FONT&gt;&lt;/DIV&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;BR&gt;&lt;/DIV&gt;&lt;FONT face=3DArial size=3D2&gt;&gt;=\r\n muy interesante....... sin lugar a \ndudas el binding din=E1mico es muy&lt;BR&gt;=\r\n&gt; poderoso, como as=ED tambi=E9n lo ser=EDa \npoder hacer el codigo reent=\r\nrante (no se&lt;BR&gt;&gt; el termino exacto) en el sentido \nde poder llamar a un=\r\na funci=F3n que reciba un&lt;BR&gt;&gt; string y corra eso \n(programaci=F3n din=\r\n=E1mica?)&lt;BR&gt;&gt; &lt;BR&gt;&gt; Soporta el Python esto? Porque si lo \nsoporta es=\r\n entonces MUY poderoso y me&lt;BR&gt;&gt; voy a tener que callar la boca y \ndarte=\r\n la raz=F3n.....&lt;BR&gt;&gt; &lt;BR&gt;&gt; Por supuesto que siempre est=E1 el tema d=\r\ne \ncuanta performance se pierde al&lt;BR&gt;&gt; interpretar codigo (y encima din=\r\n=E1mico). \nMe sorprendi=F3 leer el art=EDculo de&lt;BR&gt;&gt; Unreal y ver que c=\r\nosas que se llaman \ntodo el tiempo intensivamente est=E1n&lt;BR&gt;&gt; scriptead=\r\nas.&lt;BR&gt;&gt; &lt;BR&gt;&gt; Una \n=FAltima pregunta: Python vs Lua? Cual es la dife=\r\nrencia? ventajas de una&lt;BR&gt;&gt; \nsobre otra o no?&lt;BR&gt;&gt; &lt;BR&gt;&gt; &lt;BR&gt;&gt;=\r\n ----- Original Message -----&lt;BR&gt;&gt; \nFrom: &quot;Nahuel Greco&quot; &lt;&lt;A \nhref=3D=\r\n&quot;mailto:nahu@...&quot;&gt;nahu@...&lt;/A&gt;&gt;&lt;BR&gt;&gt; To: &lt;&lt;A \nhr=\r\nef=3D&quot;mailto:JuegosAR@...&quot;&gt;JuegosAR@...&lt;/A&gt;&g=\r\nt;&lt;BR&gt;&gt; \nSent: Monday, August 26, 2002 2:38 AM&lt;BR&gt;&gt; Subject: Re: [ADV=\r\nA] RE: interfases \nadaptables din=10&lt;BR&gt;&gt; &lt;BR&gt;&gt; &lt;BR&gt;&gt; &gt; On Sun,=\r\n 25 Aug 2002 21:56:45 \n-0700&lt;BR&gt;&gt; &gt; &quot;Ale Palmero&quot; &lt;&lt;A \nhref=3D&quot;mai=\r\nlto:apalmero@...&quot;&gt;apalmero@...&lt;/A&gt;&gt; wrote:&lt;BR&gt;&gt; \n&g=\r\nt;&lt;BR&gt;&gt; &gt; &gt; A la vez termin=E9 de leer Code complete y mi gran&lt;BR&gt;=\r\n&gt; \n&gt; &gt; duda es si todo esto ( adaptadores entre componentes, proxi=\r\nes,&lt;BR&gt;&gt; \ndelegacion,&lt;BR&gt;&gt; &gt; &gt; jerarquias din=E1micas ) se apli=\r\nca a los juegos hoy \ndia.&lt;BR&gt;&gt; &gt; &gt; No hace mucho que Carmack predi=\r\ncaba en contra de c++ y \nque la herencia&lt;BR&gt;&gt; &gt; &gt; multiple por eje=\r\nmplo era mala palabra.&lt;BR&gt;&gt; \n&gt; &gt;&lt;BR&gt;&gt; &gt; &gt; Segun parece, d=\r\nirectx lo est=E1 usando pero no termino \nde convencerme....&lt;BR&gt;&gt; &gt; &g=\r\nt;&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; &gt; No le des \ndemasiada bola a Carmack en lo rela=\r\ntivo a arquitectura de&lt;BR&gt;&gt; \nSoftware&lt;BR&gt;&gt; &gt; (en gral), es mejor e=\r\nn ese campo leer a gente como Martin \nFowler o Kent&lt;BR&gt;&gt; Beck.&lt;BR&gt;&gt; &=\r\ngt; Esta bien criticar a C++, pero no tiene \nmucho sentido cuando la critic=\r\na&lt;BR&gt;&gt; &gt; apunta a idolatrar a C :)&lt;BR&gt;&gt; \n&gt;&lt;BR&gt;&gt; &gt; &lt;NIG=\r\nHTLY-PRO-DYNAMIC-LANGUAGES-RANT&gt;&lt;BR&gt;&gt; \n&gt;&lt;BR&gt;&gt; &gt; Con respecto=\r\n a tu gran duda, justamente, IMHO uno de los \nproblemas para la&lt;BR&gt;&gt; &gt=\r\n; aplicaci=F3n de esas t=E9cnicas en games, es que los \ngames se suelen hac=\r\ner en&lt;BR&gt;&gt; C++,&lt;BR&gt;&gt; &gt; y C++ es a pain in the ass en \nla mayor=EDa=\r\n de los casos (flames a mi!). Por&lt;BR&gt;&gt; &gt; ejemplo, no es lo mismo \nhac=\r\ner un Proxy asi:&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp;&nbsp; class \nC=\r\nasita {&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \nint&n=\r\nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; num_paredes;&lt;BR&gt;&gt; \n&gt;&nbsp;&n=\r\nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \nbool&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=\r\n;&nbsp; made_of_chocolate;&lt;BR&gt;&gt; \n&gt;&nbsp;&nbsp;&nbsp;&nbsp; public:&lt;BR=\r\n&gt;&gt; \n&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Casita()&nbsp;&=\r\nnbsp; { \n(...) }&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=\r\np; \n~Casita()&nbsp; { (...) }&lt;BR&gt;&gt; \n&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=\r\nbsp;&nbsp;&nbsp; dibujar()&nbsp; { (...) \n}&lt;BR&gt;&gt; &gt; romper()&nbsp;&nbs=\r\np; { (...) }&lt;BR&gt;&gt; \n&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =\r\nhacerla_de_chocolate() { \n(...) }&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp;&nbsp; };&lt;B=\r\nR&gt;&gt; &gt;&lt;BR&gt;&gt; \n&gt;&nbsp;&nbsp;&nbsp;&nbsp; // Notar que me tengo que=\r\n tomar todo el trabajo de \ntranscribir&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp;&nbsp;=\r\n // metodo por metodo en el \nproxy:&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp;&nbsp; cl=\r\nass ProxyACasita {&lt;BR&gt;&gt; \n&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=\r\nnbsp; Casita *casita;&lt;BR&gt;&gt; \n&gt;&nbsp;&nbsp;&nbsp;&nbsp; public:&lt;BR&gt;&gt;=\r\n \n&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Casita() { casita =\r\n=3D new \nCasita(); } // inicializado aqui para&lt;BR&gt;&gt; \n&gt;&nbsp;&nbsp;&nb=\r\nsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=\r\nsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=\r\n&nbsp;&nbsp;&nbsp;&nbsp; \n// simplificar&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp;&nbs=\r\np;&nbsp;&nbsp;&nbsp;&nbsp; \n~Casita() { delete casita; }&lt;BR&gt;&gt; \n&gt;&nbsp=\r\n;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dibujar() {&lt;BR&gt;&gt; \n&gt;&nbsp;=\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=\r\nsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \ncasita-&gt;dibujar()&lt;BR&gt;&gt; \n&gt;=\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=\r\nsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n}&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&n=\r\nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; romper() \n{&lt;BR&gt;&gt; \n&gt;&nbsp;&nbsp;&nb=\r\nsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \ncasita-&gt;romper()&lt;BR&gt;&gt; \n&gt;&nbsp;&nbs=\r\np;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=\r\nnbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n}&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp;&nbsp;=\r\n&nbsp;&nbsp;&nbsp;&nbsp; \nhacerla_de_chocolate() {&lt;BR&gt;&gt; \n&gt;&nbsp;&nbsp=\r\n;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=\r\nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \ncasita-&gt;hace=\r\nrla_de_chocolate()&lt;BR&gt;&gt; \n&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=\r\nnbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=\r\np; \n}&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp;&nbsp; };&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; &gt; Que=\r\n hacerlo \nas=ED (python):&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp;&nbsp;=\r\n class \nCasita:&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=\r\n; def \n__init__(self):&lt;BR&gt;&gt; \n&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=\r\nsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \nself.num_paredes =3D 2&lt;BR&gt;&gt; \n&gt;&nbs=\r\np;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \nself.=\r\nmade_of_chocolate =3D 2&lt;BR&gt;&gt; \n&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=\r\nbsp;&nbsp; def dibujar(self):&lt;BR&gt;&gt; \n&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=\r\nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \nprint &quot;Di=\r\nbujada&quot;&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \ndef r=\r\nomper(self):&lt;BR&gt;&gt; \n&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=\r\nnbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n(...)&lt;BR&gt;&gt; &gt;&nbsp;&n=\r\nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; def \nhacerla_de_chocolate:&lt;BR&gt;&gt;=\r\n \n&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=\r\nsp;&nbsp;&nbsp;&nbsp;&nbsp; \n(...)&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nb=\r\nsp; class Autito:&lt;BR&gt;&gt; \n&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=\r\nbsp; def __init__(self):&lt;BR&gt;&gt; \n&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=\r\nnbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n(...)&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp;&n=\r\nbsp;&nbsp;&nbsp;&nbsp;&nbsp; def \norientar(self, grados):&lt;BR&gt;&gt; \n&gt;&nbs=\r\np;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=\r\nnbsp;&nbsp;&nbsp; \nprint &quot;Orientado&quot;&lt;BR&gt;&gt; \n&gt;&nbsp;&nbsp;&nbsp;&nbsp;&=\r\nnbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \nse=\r\nlf.orientacion =3D grados&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; &gt; # Ahora creo una clase =\r\nProxy \n--Generica--:&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp;&nbsp; clas=\r\ns \nDebugProxy:&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=\r\n def \n__init__(self,dest):&lt;BR&gt;&gt; \n&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=\r\n;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \nself.destinatario =3D dest&lt;BR&gt;&gt; \n=\r\n&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; def __getattr__( self,=\r\n \nmensaje):&lt;BR&gt;&gt; \n&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=\r\nbsp;&nbsp;&nbsp;&nbsp; # \nejemplo de algo que podria hacer&lt;BR&gt;&gt; \n&gt;&nb=\r\nsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \nprin=\r\nt mensaje,&quot;fue llamado&quot;&lt;BR&gt;&gt; \n&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=\r\nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \nreturn getattr( self.destinatario, mens=\r\naje )&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; &gt; So, luego \npuedo hacer:&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt=\r\n; &gt;&nbsp;&nbsp;&nbsp;&nbsp; &gt;&gt;&gt; \nuna_casita_lejana =3D DebugPro=\r\nxy(Casita())&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp;&nbsp; \n&gt;&gt;&gt; una_casita_=\r\nlejana.dibujar()&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp;&nbsp; \ndibujar fue llamado&lt;=\r\nBR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp;&nbsp; Dibujada&lt;BR&gt;&gt; \n&gt;&nbsp;&nbsp;&nbs=\r\np;&nbsp; &gt;&gt;&gt; auto =3D DebugProxy(Autito())&lt;BR&gt;&gt; \n&gt;&nbsp;&nbs=\r\np;&nbsp;&nbsp; &gt;&gt;&gt; auto.orientar(3)&lt;BR&gt;&gt; \n&gt;&nbsp;&nbsp;&nbsp=\r\n;&nbsp; orientar fue llamado&lt;BR&gt;&gt; \n&gt;&nbsp;&nbsp;&nbsp;&nbsp; Orientad=\r\no&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp;&nbsp; \n&gt;&gt;&gt;&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; &=\r\ngt; Not=E1 que la clase &quot;DebugProxy&quot; es \ngen=E9rica, solo tuve que hacerla =\r\nuna vez&lt;BR&gt;&gt; &gt; para cualquier clase en la \nque la quiera aplicar. Tam=\r\npoco tuve que tomarme&lt;BR&gt;&gt; &gt; el trabajo de \ncopiar (ni mantener a tra=\r\nv=E9s de las versiones) toda la&lt;BR&gt;&gt; interfaz&lt;BR&gt;&gt; \n&gt; de la clase =\r\na la que le quiero proxy&#39;ear las instancias. La interfaz \ndel&lt;BR&gt;&gt; &gt; =\r\nproxy se adapta a cualquier m=E9todo nuevo que le agregue a \nCasita o Autit=\r\no.&lt;BR&gt;&gt; &gt; No es nada magico ni un caso especial, es natural \nde pensa=\r\nr que uno puede&lt;BR&gt;&gt; &gt; crear un objeto que simplemente le tira \ntodos=\r\n los mensajes que le mandan&lt;BR&gt;&gt; &gt; a =E9l a otro objeto. Que C++ no \n=\r\nsoporte naturalmente eso es problema de =E9l&lt;BR&gt;&gt; :)&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt=\r\n; &gt; \nSiguiendo con esto, pensa en la dificultad inherente a C++ para usa=\r\nr&lt;BR&gt;&gt; \nProxys con&lt;BR&gt;&gt; &gt; objetos que son remotos (est=E1n en otra=\r\n m=E1quina), y a los \nque no le conoces&lt;BR&gt;&gt; la&lt;BR&gt;&gt; &gt; interfaz po=\r\nr adelantado. No es \nimposible, pero hay que laburarlo, y no te&lt;BR&gt;&gt; va =\r\na&lt;BR&gt;&gt; &gt; quedar \nelegante, cuando en un lenguaje din=E1mico no son m=\r\n=E1s de 15 lineas de&lt;BR&gt;&gt; &gt; \ncode. So, son los limites del C++, COM+ =\r\nes solo un intento por emparchar&lt;BR&gt;&gt; \nesos&lt;BR&gt;&gt; &gt; downsides del l=\r\nenguaje.&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; &gt; Obviamente, \ncuando codeemos C++, no por=\r\nque sea m=E1s dif=EDcil/trabajoso vamos&lt;BR&gt;&gt; a&lt;BR&gt;&gt; \n&gt; dejar de &#39;a=\r\nplicar&#39;, conscientemente o no, los design patterns. \nDesign&lt;BR&gt;&gt; pattern=\r\ns&lt;BR&gt;&gt; &gt; que originalmente fueron pensados en \nSmalltalk para formali=\r\nzar y dar un&lt;BR&gt;&gt; &gt; vocabulario a cosas que ya se \nven=EDan haciendo =\r\n(la implementaci=F3n de un&lt;BR&gt;&gt; Proxy en&lt;BR&gt;&gt; &gt; ST es \n&#39;similar&#39; a=\r\n la que puse anteriormente en py, en el sentido que es&lt;BR&gt;&gt; &gt; \n&#39;dinam=\r\nica&#39;/natural). Usarlos en C++ es como intentar encastrar un cubo \nde&lt;BR&gt;&gt=\r\n; &gt; hierro en un agujero cilindrico, pero hay que hacerlo aunque \nquede =\r\ntodo&lt;BR&gt;&gt; roto&lt;BR&gt;&gt; &gt; y feo. Mientras que con los lenguajes \ndin=\r\n=E1micos no tenemos un cilindro&lt;BR&gt;&gt; sino&lt;BR&gt;&gt; &gt; una pelota, pero =\r\nes \nde plastilina :)&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; &gt; So, de usar C++, IMHO hay qu=\r\ne \nintentar minimizar su uso y aplicarlo solo&lt;BR&gt;&gt; para&lt;BR&gt;&gt; &gt; low=\r\nlevel, y \narriba un lenguaje &#39;de scripting&#39;/dinamico.&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; =\r\n&gt; En cuanto \na la herencia m=FAltiple, el problema conceptual t=EDpico c=\r\non el que&lt;BR&gt;&gt; \nte&lt;BR&gt;&gt; &gt; podes encontrar es:&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt;=\r\n \n&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Humano&lt;BR&gt;&gt; \n&gt;&nbsp;&nbsp;&nbsp;=\r\n&nbsp;&nbsp; /&nbsp;&nbsp;&nbsp; &#92;&lt;BR&gt;&gt; \n&gt;&nbsp;&nbsp; Mujer&nbsp;&nb=\r\nsp;&nbsp; Hombre&lt;BR&gt;&gt; \n&gt;&nbsp;&nbsp;&nbsp;&nbsp; &#92;&nbsp;&nbsp;&nbsp;&=\r\nnbsp;&nbsp;&nbsp; /&lt;BR&gt;&gt; \n&gt;&nbsp;&nbsp;&nbsp; Hemafrodita&lt;BR&gt;&gt; &gt=\r\n;&lt;BR&gt;&gt; &gt; (Nota, con H.M. el \ngrafo de herencia se te puede complicar =\r\nmucho m=E1s, este&lt;BR&gt;&gt; es&lt;BR&gt;&gt; &gt; \nun ejemplo simple, sin H.M. tene=\r\ns la seguridad de que siempre es un \ntree)&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; &gt; F=EDja=\r\nte, seg=FAn ese gr=E1fico, tanto una Mujer como \nun Hombre son Humanos, el&lt;=\r\nBR&gt;&gt; &gt; Hemafrodita tambi=E9n lo es, pero en una \ninstancia de Hemafro=\r\ndita, tenemos&lt;BR&gt;&gt; que&lt;BR&gt;&gt; &gt; mantener una o dos \ninstancias de Hu=\r\nmano? en este caso se podr=EDa resolver&lt;BR&gt;&gt; &gt; manteniendo \nuna sola =\r\ninstancia, pero hay otros casos en donde tenemos que&lt;BR&gt;&gt; &gt; \nguardar =\r\ndos instancias de la primera clase:&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; \n&gt;&nbsp;&nbsp;&=\r\nnbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \nEmpleado&lt;BR&gt;&g=\r\nt; \n&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=\r\nnbsp;&nbsp; \n/&nbsp;&nbsp; &#92;&lt;BR&gt;&gt; \n&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=\r\nsp;&nbsp;&nbsp;&nbsp;&nbsp; \nMozo&nbsp;&nbsp; Programador&lt;BR&gt;&gt; \n&gt;&nbs=\r\np;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n&#92;&nbs=\r\np;&nbsp;&nbsp;&nbsp; /&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp;&nbsp; \nArgentinoQueNo=\r\nLlegaAFinDeMes&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; &gt; En este caso, Empleado \npodr=EDa t=\r\nener una variable que sea&lt;BR&gt;&gt; &quot;lugar_de_trabajo&quot;,&lt;BR&gt;&gt; &gt; un \nMozo=\r\n tiene un lugar de trabajo y se lo setea al Empleado, lo mismo un&lt;BR&gt;&gt; \n=\r\n&gt; Programador a Sueldo, pero que pasa con el tipo que tiene dos laburos,=\r\n \nel&lt;BR&gt;&gt; &gt; ArgentinoQueNoLlegaAFinDeMes ? Si tiene una sola instanci=\r\na de \nEmpleado,&lt;BR&gt;&gt; &gt; entonces va a haber conflicto, en este caso se=\r\n precisan \ndos instancias de&lt;BR&gt;&gt; &gt; Empleado. (Obviamente, esto se po=\r\ndr=EDa haber \narmado de otra manera)&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; &gt; As=ED que pa=\r\nra dos formas iguales \nde herencia, conceptualmente no tenemos&lt;BR&gt;&gt; &gt;=\r\n una =FAnica soluci=F3n para el \nproblema de cuantas instancias de la prime=\r\nra&lt;BR&gt;&gt; &gt; clase debemos guardar, \ndepende del caso.&lt;BR&gt;&gt; &gt;&lt;BR&gt;&=\r\ngt; &gt; Adem=E1s, existe otro problema, y es \n(en el primer ejemplo), que =\r\npasa si&lt;BR&gt;&gt; hago&lt;BR&gt;&gt; &gt; \nHemafrodita.mear()? tiene que mear parad=\r\no o sentado? Tanto Mujer como&lt;BR&gt;&gt; \nHombre&lt;BR&gt;&gt; &gt; implementan mear=\r\n() (&#39;virtual&#39; o no en Persona), pero cual \ntengo que usar&lt;BR&gt;&gt; en&lt;BR&gt;&gt=\r\n; &gt; este caso? Nuevamente, para una misma \nforma de herencia no hay&lt;BR&gt;&=\r\ngt; conceptualmente&lt;BR&gt;&gt; &gt; un criterio \nautomatico de resoluci=F3n, d=\r\nepende del caso especifico.&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; &gt; \nHasta donde conozco,=\r\n los lenguajes intentan resolver esto de una de \nestas&lt;BR&gt;&gt; &gt; formas:=\r\n&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; &gt; 1- Directamente no \npermitiendo herencia m=FAlti=\r\nple&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; &gt; 2- No permitiendo \nherencia m=FAltiple pero p=\r\nroveyendo alg=FAn tipo de&lt;BR&gt;&gt; mecanismo&lt;BR&gt;&gt; \n&gt;&nbsp;&nbsp;&nbsp;=\r\n para sustituirla (adem=E1s de composici=F3n), como Categor=EDas \n/&lt;BR&gt;&gt;=\r\n &gt;&nbsp;&nbsp;&nbsp; Protocolos/Interfases (algo remotamente similar \na =\r\nlas abstract base&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp; classes de C++).&lt;BR&gt;&gt; \n=\r\n&gt;&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp; Ej, clase B hereda de A pero a la vez \n=\r\ndeclara que soporta el protocolo&lt;BR&gt;&gt; C (&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp;=\r\n esto \nes, una instancia B puede recibir un conjunto C de mensajes&lt;BR&gt;&gt; =\r\n\ndeterminado&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp; ). El protocolo/interfase no de=\r\nfine \nvariables nuevas, solo una &#39;api&#39;.&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; &gt; 3- Intent=\r\nando \nlinearizar el grafo de ancestros, con mayor o menor&lt;BR&gt;&gt; \n&gt;&nbs=\r\np;&nbsp;&nbsp; cuidado/warnings sobre las ambig=FCedades (ej, CLOS). Seg=FA=\r\nn \nel ejemplo&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp; anterior, en Python:&lt;BR&gt;&gt; \n=\r\n&gt;&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp;&nbsp; class Humano:&lt;BR&gt;&gt; \n&gt;&nbsp;=\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; def respirar(self):&lt;BR&gt;&gt; \n&gt=\r\n;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=\r\nbsp;&nbsp;&nbsp;&nbsp; \npass&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp;&nb=\r\nsp; class \nMujer(Humano):&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=\r\nnbsp;&nbsp; def \nmear(self):&lt;BR&gt;&gt; \n&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=\r\nsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \nprint &#39;sen=\r\ntada&#39;&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; def \nbe_=\r\ncute(self):&lt;BR&gt;&gt; \n&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=\r\nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \npass&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; &=\r\ngt;&nbsp;&nbsp;&nbsp;&nbsp; class \nHombre(humano):&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;=\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; def \nprogramar(self):&lt;BR&gt;&gt; \n&gt;&nb=\r\nsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=\r\n&nbsp;&nbsp;&nbsp; \nprint &#39;se agrando adva y ni una mina&#39;&lt;BR&gt;&gt; \n&gt;&nbs=\r\np;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; def mear(self):&lt;BR&gt;&gt; \n&gt;&=\r\nnbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=\r\np;&nbsp;&nbsp;&nbsp; \nprint &#39;parado&#39;&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&=\r\nnbsp;&nbsp; class \nHemafrodita(Mujer,Hombre):&lt;BR&gt;&gt; \n&gt;&nbsp;&nbsp;&nbs=\r\np;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pass&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; \n&gt;&nbsp;&nbsp=\r\n; Entonces:&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; \n&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=\r\nnbsp;&nbsp; &gt;&gt;&gt; rene =3D \nHemafrodita()&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&n=\r\nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n&gt;&gt;&gt; rene.mear()&lt;BR&gt;&gt; \n&gt;&=\r\nnbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sentada&lt;BR&gt;&gt; \n&gt;&nbsp;=\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &gt;&gt;&gt;&lt;BR&gt;&gt; \n&gt;&lt;BR&gt;&g=\r\nt; &gt;&nbsp;&nbsp; Y si hubiese sido:&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; \n&gt;&nbsp;&nbs=\r\np;&nbsp;&nbsp; class Hemafrodita(Hombre,Mujer):&lt;BR&gt;&gt; \n&gt;&nbsp;&nbsp;&n=\r\nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pass&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; \n&gt;&nbsp;&nb=\r\nsp;&nbsp;&nbsp; &gt;&gt;&gt; rene =3D Hemafrodita()&lt;BR&gt;&gt; \n&gt;&nbsp;&nbs=\r\np;&nbsp;&nbsp; &gt;&gt;&gt; rene.mear()&lt;BR&gt;&gt; \n&gt;&nbsp;&nbsp;&nbsp;&nbs=\r\np; parado&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp;&nbsp; \n&gt;&gt;&gt;&lt;BR&gt;&gt; &gt;&lt;B=\r\nR&gt;&gt; &gt;&nbsp;&nbsp; Lo que pasa aqui es que \n&#39;linealiza&#39; el arbol de he=\r\nrencia, d=E1ndole&lt;BR&gt;&gt; &gt;&nbsp;&nbsp; m=E1s prioridad \na lo que se esp=\r\necifico primero al declarar los ancestros&lt;BR&gt;&gt; \n&gt;&nbsp;&nbsp; de cada=\r\n clase. En el segundo caso, la resoluci=F3n de mensajes \nqueda as=ED:&lt;BR&gt;&g=\r\nt; &gt;&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp;&nbsp; \nHemafrodita-&gt;Hombre-&gt;Mu=\r\njer-&gt;Humano&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; \n&gt;&nbsp;&nbsp; Y por definicion se g=\r\nuarda una sola instancia de \nHumano.&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; &gt; Igualmente c=\r\non los lenguajes que no son \nfuertemente tipados / que usan&lt;BR&gt;&gt; dynamic=\r\n&lt;BR&gt;&gt; &gt; binding, este \nproblema es un poco bastante menos grave, ya q=\r\nue se puede&lt;BR&gt;&gt; usar&lt;BR&gt;&gt; \n&gt; composicion en vez de H.M. en una ma=\r\nyor cantidad de casos. No se \nprecisa&lt;BR&gt;&gt; &gt; declarar a un objeto de =\r\nuna determinada clase para poder \nmandarle un&lt;BR&gt;&gt; mensaje X.&lt;BR&gt;&gt; &g=\r\nt;&lt;BR&gt;&gt; &gt; So, IMHO en C++ es \nconveniente no usar H.M. salvo en muy e=\r\nspeciales casos,&lt;BR&gt;&gt; &gt; y en los \ncuales hay que intentar que sea con=\r\n abstract base classes.&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; \n&gt; &lt;/RANT&gt;&lt;BR&gt;&gt; &g=\r\nt;&lt;BR&gt;&gt; &gt; Ahh.. me desahogu=E9 :)&lt;BR&gt;&gt; \n&gt;&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; =\r\n&gt; - Nahuel \nGreco&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=\r\nnbsp;&nbsp; Web \nDevelopment - Open Source -&lt;BR&gt;&gt; &gt; - &lt;A \nhref=3D&quot;htt=\r\np://www.codenix.com&quot;&gt;http://www.codenix.com&lt;/A&gt;&nbsp; Game Programming \n- R=\r\nesearch&nbsp;&nbsp; -&lt;BR&gt;&gt; &gt; - Coding / \nsysadmin&nbsp;&nbsp;&nbsp;&n=\r\nbsp;&nbsp;&nbsp; Networking. The answer is 42. \n-&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; &gt;=\r\n ADVA - Asociaci=F3n de Desarrolladores de Videojuegos \nArgentina.&lt;BR&gt;&gt; =\r\n&gt;&lt;BR&gt;&gt; &gt; &lt;A \nhref=3D&quot;http://www.adva.com.ar&quot;&gt;www.adva.com.ar&lt;/A&gt;&lt;B=\r\nR&gt;&gt; &gt; \n-------------------------------------------------------.&lt;BR&gt;&g=\r\nt; &gt;&lt;BR&gt;&gt; \n&gt;&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; &gt; Tu uso de Yahoo! Grupos est=\r\n=E1 sujeto a las&lt;BR&gt;&gt; \n&lt;A \nhref=3D&quot;http://ar.docs.yahoo.com/info/utos.ht=\r\nml&quot;&gt;http://ar.docs.yahoo.com/info/utos.html&lt;/A&gt;&lt;BR&gt;&gt; \n&gt;&lt;BR&gt;&gt; &gt;&lt;=\r\nBR&gt;&gt; &lt;BR&gt;&gt; &lt;BR&gt;&gt; ADVA - Asociaci=F3n de Desarrolladores \nde Videoj=\r\nuegos Argentina.&lt;BR&gt;&gt; &lt;BR&gt;&gt; &lt;A \nhref=3D&quot;http://www.adva.com.ar&quot;&gt;www.a=\r\ndva.com.ar&lt;/A&gt;&lt;BR&gt;&gt; \n---------------------------------------------------=\r\n----.&lt;BR&gt;&gt; &lt;BR&gt;&gt; \n&nbsp;&lt;BR&gt;&gt; &lt;BR&gt;&gt; Tu uso de Yahoo! Grupos est=\r\n=E1 sujeto a las &lt;A \nhref=3D&quot;http://ar.docs.yahoo.com/info/utos.html&quot;&gt;http:=\r\n//ar.docs.yahoo.com/info/utos.html&lt;/A&gt; \n&lt;BR&gt;&gt; &lt;/FONT&gt;&lt;/BODY&gt;&lt;/HTML&gt;\n\r\n------=_NextPart_000_007B_01C24D56.4AB1FCE0--\r\n\n"}}