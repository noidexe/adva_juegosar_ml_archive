{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"WELCOME_MSG"}]},{"resourceType":"PHOTO","capabilities":[{"name":"READ"},{"name":"UPLOAD"},{"name":"UPLOADTEMP"}]},{"resourceType":"FILE","capabilities":[{"name":"READ"},{"name":"CREATE"}]},{"resourceType":"MEMBER","capabilities":[{"name":"READ"}]},{"resourceType":"LINK","capabilities":[{"name":"CREATE"},{"name":"READ"}]},{"resourceType":"CALENDAR","capabilities":[{"name":"READ"}]},{"resourceType":"DATABASE","capabilities":[{"name":"READ"},{"name":"READ_DATA"},{"name":"CREATE"}]},{"resourceType":"POLL","capabilities":[{"name":"READ"},{"name":"VOTE"},{"name":"CREATE"}]},{"resourceType":"MESSAGE","capabilities":[{"name":"CREATE"},{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[{"name":"READ"},{"name":"UPLOAD"}]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[{"name":"READ"}]},{"resourceType":"POST","capabilities":[{"name":"READ"},{"name":"CREATE"}]},{"resourceType":"PIN","capabilities":[{"name":"READ"},{"name":"CREATE"},{"name":"DELETE"},{"name":"UPDATE"}]}],"subStatus":"NORMAL","groupUrl":"ar.groups.yahoo.com","intlCode":"ar"},"comscore":"pageview_candidate","ygData":{"userId":117795967,"authorName":"Jonatan@E-Mind","from":"&quot;Jonatan@E-Mind&quot; &lt;jonatan@...&gt;","profile":"jmoleiro","replyTo":"LIST","senderId":"ie94iO6U4vyWoegeWfwNr1XJRjoA5zPncBFwjwzwIzNMC5Cie3wMzPA_kbEuUrtMp524ssafsTx52GkhYkJy1sHZIQ-ioSm_Dl42lPv-x5w","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [ADVA] lenguajes interpretados.","postDate":"1030460118","msgId":5357,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDA5OTAwMWMyNGRkOSRjMmE0NjFiMCQzMTBhMGEwYUBCbG9ja0J1c3Rlcj4=","referencesHeader":"PDIwMDIwODE3MDIzOTExLjYyNzMucW1haWxAd2ViMTQ0MTAubWFpbC55YWhvby5jb20+PE9FNTNDNG9uMFlrS2xNSnIwblMwMDAwNTcxY0Bob3RtYWlsLmNvbT48MjAwMjA4MjEwMjAyMTMuNDZhMzI1MGQubmFodUBzb2Z0aG9tZS5uZXQ+PDAwMWEwMWMyNGNiZCQzOTRlZjE0MCQ2OTEwMjljOEBNSUNST1NPRlQ+IDwyMDAyMDgyNjAyMzg0Ny4zOTk3NDNmZS5uYWh1QHNvZnRob21lLm5ldD4gPDAwMjIwMWMyNGQwMyQzNWY4NDk2MCQ0MjYzYThjMEBzYWJhcmFzYS5raz4gPDAwN2UwMWMyNGQ5MCRmYTM2N2VlMCQ2NDEwMjljOEBNSUNST1NPRlQ+"},"prevInTopic":0,"nextInTopic":5360,"prevInTime":5356,"nextInTime":5358,"topicId":5357,"numMessagesInTopic":11,"msgSnippet":"La gran ventaja del scripting es que, dependiendo del uso, no tenes que recompilar (al menos no te das cuenta de que lo hace) el c√≥digo. Y los lenguajes de","rawEmail":"Return-Path: &lt;jonatan@...&gt;\r\nX-Sender: jonatan@...\r\nX-Apparently-To: JuegosAR@...\r\nReceived: (EGP: mail-8_1_0_1); 27 Aug 2002 14:56:21 -0000\r\nReceived: (qmail 62378 invoked from network); 27 Aug 2002 14:56:21 -0000\r\nReceived: from unknown (66.218.66.216)\n  by m5.grp.scd.yahoo.com with QMQP; 27 Aug 2002 14:56:21 -0000\r\nReceived: from unknown (HELO emind.ws) (200.59.130.163)\n  by mta1.grp.scd.yahoo.com with SMTP; 27 Aug 2002 14:56:06 -0000\r\nReceived: from BlockBuster ([24.232.2.35])\n        by emind.ws (VisNetic.MailServer.v5.0.2.0) with SMTP id GJURCE\n        for &lt;JuegosAR@...&gt;; Tue, 27 Aug 2002 11:56:26 -0300\r\nMessage-ID: &lt;099001c24dd9$c2a461b0$310a0a0a@BlockBuster&gt;\r\nTo: &lt;JuegosAR@...&gt;\r\nReferences: &lt;20020817023911.6273.qmail@...&gt;&lt;OE53C4on0YkKlMJr0nS0000571c@...&gt;&lt;20020821020213.46a3250d.nahu@...&gt;&lt;001a01c24cbd$394ef140$691029c8@MICROSOFT&gt; &lt;20020826023847.399743fe.nahu@...&gt; &lt;002201c24d03$35f84960$4263a8c0@...&gt; &lt;007e01c24d90$fa367ee0$641029c8@MICROSOFT&gt;\r\nSubject: Re: [ADVA] lenguajes interpretados.\r\nDate: Tue, 27 Aug 2002 11:55:18 -0300\r\nMIME-Version: 1.0\r\nContent-Type: multipart/alternative;\n\tboundary=&quot;----=_NextPart_000_098D_01C24DC0.9CFEF790&quot;\r\nX-Priority: 3\r\nX-MSMail-Priority: Normal\r\nX-Mailer: Microsoft Outlook Express 6.00.2600.0000\r\nX-MimeOLE: Produced By Microsoft MimeOLE V6.00.2600.0000\r\nFrom: &quot;Jonatan@E-Mind&quot; &lt;jonatan@...&gt;\r\nX-Yahoo-Group-Post: member; u=117795967\r\nX-Yahoo-Profile: jmoleiro\r\n\r\n\r\n------=_NextPart_000_098D_01C24DC0.9CFEF790\r\nContent-Type: text/plain;\n\tcharset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nLa gran ventaja del scripting es que, dependiendo del uso, no tenes que rec=\r\nompilar (al menos no te das cuenta de que lo hace) el c=F3digo. Y los lengu=\r\najes de scripting son cada vez m=E1s poderosos y r=E1pidos (De hecho los ej=\r\nemplos que han dado demuestra que es asi). Yo estoy viendo un componente de=\r\n Python par Delphi y no anda nada mal. Yo he revisado m=E1s Engines de Scri=\r\npting escritos en pascal y andan muy bien. Por ejemplo el DWS (Delphi Web S=\r\ncript) una especie de ASP pero con sintaxis en Pascal. Pero el lenguaje de =\r\nscripting que si use un poco m=E1s es el Innerfuse Pascal Script (el mismo =\r\nque usa el Inno Setup www.innosetup.com ). Al igual que otros, antes de eje=\r\ncutar, compila, lo que le da mas velocidad e incluso permite definir clases=\r\n dentro del script y hacer llamados al programa. Por ahora son solo .pas pe=\r\nro el lei por ahi que querian hacer una DLL, hay que ver. Si le quieren ech=\r\nar un vistazo http://www.carlo-kok.com/ifps.php\n\nSaludos\n  ----- Original M=\r\nessage ----- \n  From: Ale Palmero \n  To: JuegosAR@... \n  Sen=\r\nt: Tuesday, August 27, 2002 3:14 AM\n  Subject: [ADVA] lenguajes interpretad=\r\nos.\n\n\n  Muy interesante el ejemplo de python de Nahuel. (aunque no manejo e=\r\nl lenguaje)\n  Lo que sabia es que hay un programita que tomando los .h  de =\r\ntu programa, genera codigo automatico para acceder a tus funciones y variab=\r\nles desde el interprete de python (que embebiste en tu juego) logrando as=\r\n=ED scripting din=E1mico en phyton. Ejemplo: le pasas el .h de opengl y te =\r\ngenera codigo como para ir probando comandos opengl desde una consola.\n  No=\r\n se que tan bien andar=E1 con .h de c++. Ni me acuerdo el nombre pero lo te=\r\nngo en un cd, si a alguien le interesa la busco. Lo vi implementado en un e=\r\nngine open source de aventuras graficas que se llama robot\n\n  Para hacer lo=\r\n mismo (lo de correr un string, o un archivo de texto con codigo) pero de c=\r\n++\n  hay un interprete gratuito embebible en tu juego que se llama CINT. In=\r\nterpreta un 90% del lenguaje c++ y es tan robusto como para ejecutarse inte=\r\nrpretando su propio c=F3digo ( tiene como 10 a=F1os de desarrollo ya creo) =\r\nEs lo mejor que vi como para incorporar scripting a un engine propio.\n\n  So=\r\nbre unrealscript, todo el gameplay de Unreal y de los juegos que usan el mo=\r\ntor esta en UScript, aunque lo mas pesado esta en clases nativas compiladas=\r\n en c/c++ heredables desde UScript.\n  Uscript es precompilado igualmente y =\r\ndice el creador que corre 20 veces mas lento (creo) por lo que recomienda p=\r\nrogramar solo eventos y respuestas a estos (no fisica por ejemplo). Es igua=\r\nl a c++ pero incorpora cosas para los juegos como estados, operadores como =\r\nDOT para sacar dotproduct entre dos vectors etc.. \n\n  Nunca escuch=E9 habla=\r\nr de &quot;lenguajes din=E1micos&quot;, comentate algo m=E1s\n\n  ----- Original Messag=\r\ne ----- \n  From: Javier F. Otaegui &lt;javier@...&gt;\n  To: &lt;JuegosAR@gr=\r\nuposyahoo.com.ar&gt;\n  Sent: Monday, August 26, 2002 6:19 AM\n  Subject: Re: [A=\r\nDVA] RE: interfases adaptables din=10\n\n\n  &gt; muy interesante....... sin luga=\r\nr a dudas el binding din=E1mico es muy\n  &gt; poderoso, como as=ED tambi=E9n l=\r\no ser=EDa poder hacer el codigo reentrante (no se\n  &gt; el termino exacto) en=\r\n el sentido de poder llamar a una funci=F3n que reciba un\n  &gt; string y corr=\r\na eso (programaci=F3n din=E1mica?)\n  &gt; \n  &gt; Soporta el Python esto? Porque =\r\nsi lo soporta es entonces MUY poderoso y me\n  &gt; voy a tener que callar la b=\r\noca y darte la raz=F3n.....\n  &gt; \n  &gt; Por supuesto que siempre est=E1 el tem=\r\na de cuanta performance se pierde al\n  &gt; interpretar codigo (y encima din=\r\n=E1mico). Me sorprendi=F3 leer el art=EDculo de\n  &gt; Unreal y ver que cosas =\r\nque se llaman todo el tiempo intensivamente est=E1n\n  &gt; scripteadas.\n  &gt; \n =\r\n &gt; Una =FAltima pregunta: Python vs Lua? Cual es la diferencia? ventajas de=\r\n una\n  &gt; sobre otra o no?\n  &gt; \n  &gt; \n  &gt; ----- Original Message -----\n  &gt; Fr=\r\nom: &quot;Nahuel Greco&quot; &lt;nahu@...&gt;\n  &gt; To: &lt;JuegosAR@...=\r\n&gt;\n  &gt; Sent: Monday, August 26, 2002 2:38 AM\n  &gt; Subject: Re: [ADVA] RE: int=\r\nerfases adaptables din=10\n  &gt; \n  &gt; \n  &gt; &gt; On Sun, 25 Aug 2002 21:56:45 -070=\r\n0\n  &gt; &gt; &quot;Ale Palmero&quot; &lt;apalmero@...&gt; wrote:\n  &gt; &gt;\n  &gt; &gt; &gt; A la vez=\r\n termin=E9 de leer Code complete y mi gran\n  &gt; &gt; &gt; duda es si todo esto ( a=\r\ndaptadores entre componentes, proxies,\n  &gt; delegacion,\n  &gt; &gt; &gt; jerarquias d=\r\nin=E1micas ) se aplica a los juegos hoy dia.\n  &gt; &gt; &gt; No hace mucho que Carm=\r\nack predicaba en contra de c++ y que la herencia\n  &gt; &gt; &gt; multiple por ejemp=\r\nlo era mala palabra.\n  &gt; &gt; &gt;\n  &gt; &gt; &gt; Segun parece, directx lo est=E1 usando=\r\n pero no termino de convencerme....\n  &gt; &gt; &gt;\n  &gt; &gt;\n  &gt; &gt; No le des demasiada=\r\n bola a Carmack en lo relativo a arquitectura de\n  &gt; Software\n  &gt; &gt; (en gra=\r\nl), es mejor en ese campo leer a gente como Martin Fowler o Kent\n  &gt; Beck.\n=\r\n  &gt; &gt; Esta bien criticar a C++, pero no tiene mucho sentido cuando la criti=\r\nca\n  &gt; &gt; apunta a idolatrar a C :)\n  &gt; &gt;\n  &gt; &gt; &lt;NIGHTLY-PRO-DYNAMIC-LANGUAG=\r\nES-RANT&gt;\n  &gt; &gt;\n  &gt; &gt; Con respecto a tu gran duda, justamente, IMHO uno de l=\r\nos problemas para la\n  &gt; &gt; aplicaci=F3n de esas t=E9cnicas en games, es que=\r\n los games se suelen hacer en\n  &gt; C++,\n  &gt; &gt; y C++ es a pain in the ass en =\r\nla mayor=EDa de los casos (flames a mi!). Por\n  &gt; &gt; ejemplo, no es lo mismo=\r\n hacer un Proxy asi:\n  &gt; &gt;\n  &gt; &gt;     class Casita {\n  &gt; &gt;         int      =\r\n  num_paredes;\n  &gt; &gt;         bool       made_of_chocolate;\n  &gt; &gt;     public=\r\n:\n  &gt; &gt;         Casita()   { (...) }\n  &gt; &gt;         ~Casita()  { (...) }\n  &gt;=\r\n &gt;         dibujar()  { (...) }\n  &gt; &gt; romper()   { (...) }\n  &gt; &gt;         ha=\r\ncerla_de_chocolate() { (...) }\n  &gt; &gt;     };\n  &gt; &gt;\n  &gt; &gt;     // Notar que me=\r\n tengo que tomar todo el trabajo de transcribir\n  &gt; &gt;     // metodo por met=\r\nodo en el proxy:\n  &gt; &gt;     class ProxyACasita {\n  &gt; &gt;         Casita *casit=\r\na;\n  &gt; &gt;     public:\n  &gt; &gt;         Casita() { casita =3D new Casita(); } //=\r\n inicializado aqui para\n  &gt; &gt;                                             /=\r\n/ simplificar\n  &gt; &gt;         ~Casita() { delete casita; }\n  &gt; &gt;         dibu=\r\njar() {\n  &gt; &gt;                     casita-&gt;dibujar()\n  &gt; &gt;                  =\r\n   }\n  &gt; &gt;         romper() {\n  &gt; &gt;                     casita-&gt;romper()\n  =\r\n&gt; &gt;                     }\n  &gt; &gt;         hacerla_de_chocolate() {\n  &gt; &gt;     =\r\n                    casita-&gt;hacerla_de_chocolate()\n  &gt; &gt;                   =\r\n  }\n  &gt; &gt;     };\n  &gt; &gt;\n  &gt; &gt; Que hacerlo as=ED (python):\n  &gt; &gt;\n  &gt; &gt;     cl=\r\nass Casita:\n  &gt; &gt;         def __init__(self):\n  &gt; &gt;             self.num_pa=\r\nredes =3D 2\n  &gt; &gt;             self.made_of_chocolate =3D 2\n  &gt; &gt;         de=\r\nf dibujar(self):\n  &gt; &gt;                 print &quot;Dibujada&quot;\n  &gt; &gt;         def r=\r\nomper(self):\n  &gt; &gt;                 (...)\n  &gt; &gt;         def hacerla_de_choco=\r\nlate:\n  &gt; &gt;                 (...)\n  &gt; &gt;\n  &gt; &gt;    class Autito:\n  &gt; &gt;       =\r\n  def __init__(self):\n  &gt; &gt;             (...)\n  &gt; &gt;         def orientar(se=\r\nlf, grados):\n  &gt; &gt;                 print &quot;Orientado&quot;\n  &gt; &gt;                 =\r\nself.orientacion =3D grados\n  &gt; &gt;\n  &gt; &gt; # Ahora creo una clase Proxy --Gene=\r\nrica--:\n  &gt; &gt;\n  &gt; &gt;     class DebugProxy:\n  &gt; &gt;         def __init__(self,d=\r\nest):\n  &gt; &gt;             self.destinatario =3D dest\n  &gt; &gt;         def __geta=\r\nttr__( self, mensaje):\n  &gt; &gt;             # ejemplo de algo que podria hacer=\r\n\n  &gt; &gt;             print mensaje,&quot;fue llamado&quot;\n  &gt; &gt;             return get=\r\nattr( self.destinatario, mensaje )\n  &gt; &gt;\n  &gt; &gt; So, luego puedo hacer:\n  &gt; &gt;=\r\n\n  &gt; &gt;     &gt;&gt;&gt; una_casita_lejana =3D DebugProxy(Casita())\n  &gt; &gt;     &gt;&gt;&gt; una=\r\n_casita_lejana.dibujar()\n  &gt; &gt;     dibujar fue llamado\n  &gt; &gt;     Dibujada\n =\r\n &gt; &gt;     &gt;&gt;&gt; auto =3D DebugProxy(Autito())\n  &gt; &gt;     &gt;&gt;&gt; auto.orientar(3)\n =\r\n &gt; &gt;     orientar fue llamado\n  &gt; &gt;     Orientado\n  &gt; &gt;     &gt;&gt;&gt;\n  &gt; &gt;\n  &gt; &gt;=\r\n Not=E1 que la clase &quot;DebugProxy&quot; es gen=E9rica, solo tuve que hacerla una =\r\nvez\n  &gt; &gt; para cualquier clase en la que la quiera aplicar. Tampoco tuve qu=\r\ne tomarme\n  &gt; &gt; el trabajo de copiar (ni mantener a trav=E9s de las version=\r\nes) toda la\n  &gt; interfaz\n  &gt; &gt; de la clase a la que le quiero proxy&#39;ear las=\r\n instancias. La interfaz del\n  &gt; &gt; proxy se adapta a cualquier m=E9todo nue=\r\nvo que le agregue a Casita o Autito.\n  &gt; &gt; No es nada magico ni un caso esp=\r\necial, es natural de pensar que uno puede\n  &gt; &gt; crear un objeto que simplem=\r\nente le tira todos los mensajes que le mandan\n  &gt; &gt; a =E9l a otro objeto. Q=\r\nue C++ no soporte naturalmente eso es problema de =E9l\n  &gt; :)\n  &gt; &gt;\n  &gt; &gt; S=\r\niguiendo con esto, pensa en la dificultad inherente a C++ para usar\n  &gt; Pro=\r\nxys con\n  &gt; &gt; objetos que son remotos (est=E1n en otra m=E1quina), y a los =\r\nque no le conoces\n  &gt; la\n  &gt; &gt; interfaz por adelantado. No es imposible, pe=\r\nro hay que laburarlo, y no te\n  &gt; va a\n  &gt; &gt; quedar elegante, cuando en un =\r\nlenguaje din=E1mico no son m=E1s de 15 lineas de\n  &gt; &gt; code. So, son los li=\r\nmites del C++, COM+ es solo un intento por emparchar\n  &gt; esos\n  &gt; &gt; downsid=\r\nes del lenguaje.\n  &gt; &gt;\n  &gt; &gt; Obviamente, cuando codeemos C++, no porque sea=\r\n m=E1s dif=EDcil/trabajoso vamos\n  &gt; a\n  &gt; &gt; dejar de &#39;aplicar&#39;, consciente=\r\nmente o no, los design patterns. Design\n  &gt; patterns\n  &gt; &gt; que originalment=\r\ne fueron pensados en Smalltalk para formalizar y dar un\n  &gt; &gt; vocabulario a=\r\n cosas que ya se ven=EDan haciendo (la implementaci=F3n de un\n  &gt; Proxy en\n=\r\n  &gt; &gt; ST es &#39;similar&#39; a la que puse anteriormente en py, en el sentido que =\r\nes\n  &gt; &gt; &#39;dinamica&#39;/natural). Usarlos en C++ es como intentar encastrar un =\r\ncubo de\n  &gt; &gt; hierro en un agujero cilindrico, pero hay que hacerlo aunque =\r\nquede todo\n  &gt; roto\n  &gt; &gt; y feo. Mientras que con los lenguajes din=E1micos=\r\n no tenemos un cilindro\n  &gt; sino\n  &gt; &gt; una pelota, pero es de plastilina :)=\r\n\n  &gt; &gt;\n  &gt; &gt; So, de usar C++, IMHO hay que intentar minimizar su uso y apli=\r\ncarlo solo\n  &gt; para\n  &gt; &gt; lowlevel, y arriba un lenguaje &#39;de scripting&#39;/din=\r\namico.\n  &gt; &gt;\n  &gt; &gt; En cuanto a la herencia m=FAltiple, el problema conceptu=\r\nal t=EDpico con el que\n  &gt; te\n  &gt; &gt; podes encontrar es:\n  &gt; &gt;\n  &gt; &gt;      Hu=\r\nmano\n  &gt; &gt;      /    &#92;\n  &gt; &gt;   Mujer    Hombre\n  &gt; &gt;     &#92;       /\n  &gt; &gt;   =\r\n Hemafrodita\n  &gt; &gt;\n  &gt; &gt; (Nota, con H.M. el grafo de herencia se te puede c=\r\nomplicar mucho m=E1s, este\n  &gt; es\n  &gt; &gt; un ejemplo simple, sin H.M. tenes l=\r\na seguridad de que siempre es un tree)\n  &gt; &gt;\n  &gt; &gt; F=EDjate, seg=FAn ese gr=\r\n=E1fico, tanto una Mujer como un Hombre son Humanos, el\n  &gt; &gt; Hemafrodita t=\r\nambi=E9n lo es, pero en una instancia de Hemafrodita, tenemos\n  &gt; que\n  &gt; &gt;=\r\n mantener una o dos instancias de Humano? en este caso se podr=EDa resolver=\r\n\n  &gt; &gt; manteniendo una sola instancia, pero hay otros casos en donde tenemo=\r\ns que\n  &gt; &gt; guardar dos instancias de la primera clase:\n  &gt; &gt;\n  &gt; &gt;        =\r\n     Empleado\n  &gt; &gt;              /   &#92;\n  &gt; &gt;           Mozo   Programador\n =\r\n &gt; &gt;             &#92;     /\n  &gt; &gt;     ArgentinoQueNoLlegaAFinDeMes\n  &gt; &gt;\n  &gt; &gt;=\r\n En este caso, Empleado podr=EDa tener una variable que sea\n  &gt; &quot;lugar_de_t=\r\nrabajo&quot;,\n  &gt; &gt; un Mozo tiene un lugar de trabajo y se lo setea al Empleado,=\r\n lo mismo un\n  &gt; &gt; Programador a Sueldo, pero que pasa con el tipo que tien=\r\ne dos laburos, el\n  &gt; &gt; ArgentinoQueNoLlegaAFinDeMes ? Si tiene una sola in=\r\nstancia de Empleado,\n  &gt; &gt; entonces va a haber conflicto, en este caso se p=\r\nrecisan dos instancias de\n  &gt; &gt; Empleado. (Obviamente, esto se podr=EDa hab=\r\ner armado de otra manera)\n  &gt; &gt;\n  &gt; &gt; As=ED que para dos formas iguales de =\r\nherencia, conceptualmente no tenemos\n  &gt; &gt; una =FAnica soluci=F3n para el p=\r\nroblema de cuantas instancias de la primera\n  &gt; &gt; clase debemos guardar, de=\r\npende del caso.\n  &gt; &gt;\n  &gt; &gt; Adem=E1s, existe otro problema, y es (en el pri=\r\nmer ejemplo), que pasa si\n  &gt; hago\n  &gt; &gt; Hemafrodita.mear()? tiene que mear=\r\n parado o sentado? Tanto Mujer como\n  &gt; Hombre\n  &gt; &gt; implementan mear() (&#39;v=\r\nirtual&#39; o no en Persona), pero cual tengo que usar\n  &gt; en\n  &gt; &gt; este caso? =\r\nNuevamente, para una misma forma de herencia no hay\n  &gt; conceptualmente\n  &gt;=\r\n &gt; un criterio automatico de resoluci=F3n, depende del caso especifico.\n  &gt;=\r\n &gt;\n  &gt; &gt; Hasta donde conozco, los lenguajes intentan resolver esto de una d=\r\ne estas\n  &gt; &gt; formas:\n  &gt; &gt;\n  &gt; &gt; 1- Directamente no permitiendo herencia m=\r\n=FAltiple\n  &gt; &gt;\n  &gt; &gt; 2- No permitiendo herencia m=FAltiple pero proveyendo=\r\n alg=FAn tipo de\n  &gt; mecanismo\n  &gt; &gt;    para sustituirla (adem=E1s de compo=\r\nsici=F3n), como Categor=EDas /\n  &gt; &gt;    Protocolos/Interfases (algo remotam=\r\nente similar a las abstract base\n  &gt; &gt;    classes de C++).\n  &gt; &gt;\n  &gt; &gt;    E=\r\nj, clase B hereda de A pero a la vez declara que soporta el protocolo\n  &gt; C=\r\n (\n  &gt; &gt;    esto es, una instancia B puede recibir un conjunto C de mensaje=\r\ns\n  &gt; determinado\n  &gt; &gt;    ). El protocolo/interfase no define variables nu=\r\nevas, solo una &#39;api&#39;.\n  &gt; &gt;\n  &gt; &gt; 3- Intentando linearizar el grafo de ance=\r\nstros, con mayor o menor\n  &gt; &gt;    cuidado/warnings sobre las ambig=FCedades=\r\n (ej, CLOS). Seg=FAn el ejemplo\n  &gt; &gt;    anterior, en Python:\n  &gt; &gt;\n  &gt; &gt;  =\r\n   class Humano:\n  &gt; &gt;         def respirar(self):\n  &gt; &gt;                 pa=\r\nss\n  &gt; &gt;\n  &gt; &gt;     class Mujer(Humano):\n  &gt; &gt;         def mear(self):\n  &gt; &gt;=\r\n                 print &#39;sentada&#39;\n  &gt; &gt;         def be_cute(self):\n  &gt; &gt;    =\r\n             pass\n  &gt; &gt;\n  &gt; &gt;     class Hombre(humano):\n  &gt; &gt;         def p=\r\nrogramar(self):\n  &gt; &gt;                 print &#39;se agrando adva y ni una mina&#39;=\r\n\n  &gt; &gt;         def mear(self):\n  &gt; &gt;                 print &#39;parado&#39;\n  &gt; &gt;\n =\r\n &gt; &gt;     class Hemafrodita(Mujer,Hombre):\n  &gt; &gt;         pass\n  &gt; &gt;\n  &gt; &gt;   =\r\nEntonces:\n  &gt; &gt;\n  &gt; &gt;         &gt;&gt;&gt; rene =3D Hemafrodita()\n  &gt; &gt;         &gt;&gt;&gt; =\r\nrene.mear()\n  &gt; &gt;         sentada\n  &gt; &gt;         &gt;&gt;&gt;\n  &gt; &gt;\n  &gt; &gt;   Y si hubi=\r\nese sido:\n  &gt; &gt;\n  &gt; &gt;     class Hemafrodita(Hombre,Mujer):\n  &gt; &gt;         pa=\r\nss\n  &gt; &gt;\n  &gt; &gt;     &gt;&gt;&gt; rene =3D Hemafrodita()\n  &gt; &gt;     &gt;&gt;&gt; rene.mear()\n  &gt;=\r\n &gt;     parado\n  &gt; &gt;     &gt;&gt;&gt;\n  &gt; &gt;\n  &gt; &gt;   Lo que pasa aqui es que &#39;linealiz=\r\na&#39; el arbol de herencia, d=E1ndole\n  &gt; &gt;   m=E1s prioridad a lo que se espe=\r\ncifico primero al declarar los ancestros\n  &gt; &gt;   de cada clase. En el segun=\r\ndo caso, la resoluci=F3n de mensajes queda as=ED:\n  &gt; &gt;\n  &gt; &gt;     Hemafrodi=\r\nta-&gt;Hombre-&gt;Mujer-&gt;Humano\n  &gt; &gt;\n  &gt; &gt;   Y por definicion se guarda una sola=\r\n instancia de Humano.\n  &gt; &gt;\n  &gt; &gt; Igualmente con los lenguajes que no son f=\r\nuertemente tipados / que usan\n  &gt; dynamic\n  &gt; &gt; binding, este problema es u=\r\nn poco bastante menos grave, ya que se puede\n  &gt; usar\n  &gt; &gt; composicion en =\r\nvez de H.M. en una mayor cantidad de casos. No se precisa\n  &gt; &gt; declarar a =\r\nun objeto de una determinada clase para poder mandarle un\n  &gt; mensaje X.\n  =\r\n&gt; &gt;\n  &gt; &gt; So, IMHO en C++ es conveniente no usar H.M. salvo en muy especial=\r\nes casos,\n  &gt; &gt; y en los cuales hay que intentar que sea con abstract base =\r\nclasses.\n  &gt; &gt;\n  &gt; &gt; &lt;/RANT&gt;\n  &gt; &gt;\n  &gt; &gt; Ahh.. me desahogu=E9 :)\n  &gt; &gt;\n  &gt; =\r\n&gt;\n  &gt; &gt; - Nahuel Greco            Web Development - Open Source -\n  &gt; &gt; - h=\r\nttp://www.codenix.com  Game Programming - Research   -\n  &gt; &gt; - Coding / sys=\r\nadmin       Networking. The answer is 42. -\n  &gt; &gt;\n  &gt; &gt; ADVA - Asociaci=F3n=\r\n de Desarrolladores de Videojuegos Argentina.\n  &gt; &gt;\n  &gt; &gt; www.adva.com.ar\n =\r\n &gt; &gt; -------------------------------------------------------.\n  &gt; &gt;\n  &gt; &gt;\n =\r\n &gt; &gt;\n  &gt; &gt; Tu uso de Yahoo! Grupos est=E1 sujeto a las\n  &gt; http://ar.docs.y=\r\nahoo.com/info/utos.html\n  &gt; &gt;\n  &gt; &gt;\n  &gt; \n  &gt; \n  &gt; ADVA - Asociaci=F3n de De=\r\nsarrolladores de Videojuegos Argentina.\n  &gt; \n  &gt; www.adva.com.ar\n  &gt; ------=\r\n-------------------------------------------------.\n  &gt; \n  &gt;  \n  &gt; \n  &gt; Tu u=\r\nso de Yahoo! Grupos est=E1 sujeto a las http://ar.docs.yahoo.com/info/utos.=\r\nhtml \n  &gt; \n  ADVA - Asociaci=F3n de Desarrolladores de Videojuegos Argentin=\r\na.\n\n  www.adva.com.ar\n  ---------------------------------------------------=\r\n----.\n\n\n\n  Tu uso de Yahoo! Grupos est=E1 sujeto a las Condiciones del serv=\r\nicio de Yahoo!. \n\n\r\n------=_NextPart_000_098D_01C24DC0.9CFEF790\r\nContent-Type: text/html;\n\tcharset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot;&gt;\n&lt;HTML&gt;&lt;HEAD&gt;=\r\n\n&lt;META http-equiv=3DContent-Type content=3D&quot;text/html; charset=3Diso-8859-1=\r\n&quot;&gt;\n&lt;META content=3D&quot;MSHTML 6.00.2719.2200&quot; name=3DGENERATOR&gt;\n&lt;STYLE&gt;&lt;/STYLE=\r\n&gt;\n&lt;/HEAD&gt;\n&lt;BODY bgColor=3D#ffffff&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;La gran=\r\n ventaja del scripting es que, dependiendo \ndel uso, no tenes que recompila=\r\nr (al menos no te das cuenta de que lo hace) el \nc=F3digo. Y los lenguajes =\r\nde scripting son cada vez m=E1s poderosos y r=E1pidos (De \nhecho los ejempl=\r\nos que han dado demuestra que es asi). Yo estoy viendo un \ncomponente de Py=\r\nthon par Delphi y no anda nada mal. Yo he revisado m=E1s Engines \nde Script=\r\ning escritos en pascal y andan muy bien. Por ejemplo el DWS (Delphi Web \nSc=\r\nript)&nbsp;una especie de ASP pero con sintaxis en&nbsp;Pascal. Pero el \nle=\r\nnguaje de scripting que si use un poco m=E1s es el Innerfuse Pascal Script =\r\n(el \nmismo que usa el Inno Setup &lt;/FONT&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;A \nhre=\r\nf=3D&quot;http://www.innosetup.com&quot;&gt;www.innosetup.com&lt;/A&gt;&nbsp;). Al igual que \n=\r\notros, antes de ejecutar, compila, lo que le da mas velocidad e incluso per=\r\nmite \ndefinir clases dentro del script y hacer llamados al programa. Por ah=\r\nora son \nsolo .pas pero el lei por ahi que querian hacer una DLL, hay que v=\r\ner. Si le \nquieren echar un vistazo &lt;A \nhref=3D&quot;http://www.carlo-kok.com/if=\r\nps.php&quot;&gt;http://www.carlo-kok.com/ifps.php&lt;/A&gt;&lt;BR&gt;&lt;/FONT&gt;&lt;FONT \nface=3DArial=\r\n size=3D2&gt;&lt;BR&gt;Saludos&lt;/DIV&gt;&lt;/FONT&gt;\n&lt;BLOCKQUOTE \nstyle=3D&quot;PADDING-RIGHT: 0px=\r\n; PADDING-LEFT: 5px; MARGIN-LEFT: 5px; BORDER-LEFT: #000000 2px solid; MARG=\r\nIN-RIGHT: 0px&quot;&gt;\n  &lt;DIV style=3D&quot;FONT: 10pt arial&quot;&gt;----- Original Message --=\r\n--- &lt;/DIV&gt;\n  &lt;DIV \n  style=3D&quot;BACKGROUND: #e4e4e4; FONT: 10pt arial; font-c=\r\nolor: black&quot;&gt;&lt;B&gt;From:&lt;/B&gt; \n  &lt;A title=3Dapalmero@... href=3D&quot;mailt=\r\no:apalmero@...&quot;&gt;Ale \n  Palmero&lt;/A&gt; &lt;/DIV&gt;\n  &lt;DIV style=3D&quot;FONT: 10=\r\npt arial&quot;&gt;&lt;B&gt;To:&lt;/B&gt; &lt;A title=3DJuegosAR@... \n  href=3D&quot;mail=\r\nto:JuegosAR@...&quot;&gt;JuegosAR@...&lt;/A&gt; \n  &lt;/DIV&gt;\n =\r\n &lt;DIV style=3D&quot;FONT: 10pt arial&quot;&gt;&lt;B&gt;Sent:&lt;/B&gt; Tuesday, August 27, 2002 3:14=\r\n \n  AM&lt;/DIV&gt;\n  &lt;DIV style=3D&quot;FONT: 10pt arial&quot;&gt;&lt;B&gt;Subject:&lt;/B&gt; [ADVA] lengu=\r\najes \n  interpretados.&lt;/DIV&gt;\n  &lt;DIV&gt;&lt;BR&gt;&lt;/DIV&gt;\n  &lt;DIV&gt;&lt;FONT face=3DArial si=\r\nze=3D2&gt;Muy interesante el ejemplo de python de Nahuel. \n  (aunque no manejo=\r\n el lenguaje)&lt;/FONT&gt;&lt;/DIV&gt;\n  &lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;Lo que sabia =\r\nes que hay un programita que tomando \n  los .h&nbsp; de tu programa, genera=\r\n codigo automatico para acceder a tus \n  funciones y variables desde el int=\r\nerprete de python (que embebiste en tu \n  juego) logrando as=ED scripting d=\r\nin=E1mico en phyton. Ejemplo: le pasas el .h de \n  opengl y te genera codig=\r\no como para ir probando comandos opengl desde una \n  consola.&lt;/FONT&gt;&lt;/DIV&gt;\n=\r\n  &lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;No se que tan bien andar=E1 con .h de c+=\r\n+. Ni me \n  acuerdo el nombre pero lo tengo en un cd, si a alguien le inter=\r\nesa la busco. \n  Lo vi implementado en un engine open source de aventuras g=\r\nraficas que se llama \n  robot&lt;/FONT&gt;&lt;/DIV&gt;\n  &lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n  &lt;DIV&gt;&lt;FONT=\r\n face=3DArial size=3D2&gt;Para hacer lo mismo (&lt;STRONG&gt;lo de correr un \n  stri=\r\nng, o un archivo de texto con codigo) pero de c++&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/DIV&gt;\n  &lt;=\r\nDIV&gt;&lt;FONT face=3DArial size=3D2&gt;hay un interprete gratuito embebible en tu =\r\njuego \n  que se llama CINT. Interpreta un 90% del lenguaje c++ y es tan rob=\r\nusto como \n  para ejecutarse interpretando su propio c=F3digo ( tiene como =\r\n10 a=F1os de \n  desarrollo ya creo) Es lo mejor que vi como para incorporar=\r\n scripting a un \n  engine propio.&lt;/FONT&gt;&lt;/DIV&gt;\n  &lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n  &lt;DIV&gt;&lt;=\r\nFONT face=3DArial size=3D2&gt;Sobre unrealscript, todo el gameplay de Unreal y=\r\n \n  de los juegos que usan el motor esta en UScript, aunque lo mas pesado e=\r\nsta en \n  clases nativas&nbsp;compiladas en c/c++ heredables desde UScript.=\r\n&lt;/FONT&gt;&lt;/DIV&gt;\n  &lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;Uscript es precompilado ig=\r\nualmente y dice el \n  creador que corre 20 veces mas lento (creo) por lo qu=\r\ne recomienda programar \n  solo&nbsp;eventos y respuestas a estos (no fisica=\r\n por ejemplo). Es igual a c++ \n  pero incorpora cosas para los juegos como =\r\nestados, operadores como DOT para \n  sacar dotproduct entre dos vectors etc=\r\n.. &lt;/FONT&gt;&lt;/DIV&gt;\n  &lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n  &lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;Nun=\r\nca escuch=E9 hablar de&nbsp;&quot;lenguajes \n  din=E1micos&quot;, comentate algo m=E1=\r\ns&lt;/FONT&gt;&lt;/DIV&gt;\n  &lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n  &lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;-----=\r\n Original Message ----- &lt;/FONT&gt;\n  &lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;From: Ja=\r\nvier F. Otaegui &lt;&lt;A \n  href=3D&quot;mailto:javier@...&quot;&gt;javier@sabara=\r\nsa.com&lt;/A&gt;&gt;&lt;/FONT&gt;&lt;/DIV&gt;\n  &lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;To: &lt;&lt;A \n=\r\n  href=3D&quot;mailto:JuegosAR@...&quot;&gt;JuegosAR@...&lt;/=\r\nA&gt;&gt;&lt;/FONT&gt;&lt;/DIV&gt;\n  &lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;Sent: Monday, August=\r\n 26, 2002 6:19 \nAM&lt;/FONT&gt;&lt;/DIV&gt;\n  &lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;Subject:=\r\n Re: [ADVA] RE: interfases adaptables \n  din=10&lt;/FONT&gt;&lt;/DIV&gt;&lt;/DIV&gt;\n  &lt;DIV&gt;&lt;=\r\nBR&gt;&lt;/DIV&gt;&lt;FONT face=3DArial size=3D2&gt;&gt; muy interesante....... sin lugar =\r\na \n  dudas el binding din=E1mico es muy&lt;BR&gt;&gt; poderoso, como as=ED tambi=\r\n=E9n lo ser=EDa \n  poder hacer el codigo reentrante (no se&lt;BR&gt;&gt; el termi=\r\nno exacto) en el \n  sentido de poder llamar a una funci=F3n que reciba un&lt;B=\r\nR&gt;&gt; string y corra eso \n  (programaci=F3n din=E1mica?)&lt;BR&gt;&gt; &lt;BR&gt;&gt; =\r\nSoporta el Python esto? Porque si lo \n  soporta es entonces MUY poderoso y =\r\nme&lt;BR&gt;&gt; voy a tener que callar la boca y \n  darte la raz=F3n.....&lt;BR&gt;&gt=\r\n; &lt;BR&gt;&gt; Por supuesto que siempre est=E1 el tema de \n  cuanta performance=\r\n se pierde al&lt;BR&gt;&gt; interpretar codigo (y encima \n  din=E1mico). Me sorpr=\r\nendi=F3 leer el art=EDculo de&lt;BR&gt;&gt; Unreal y ver que cosas \n  que se llam=\r\nan todo el tiempo intensivamente est=E1n&lt;BR&gt;&gt; scripteadas.&lt;BR&gt;&gt; \n  &lt;B=\r\nR&gt;&gt; Una =FAltima pregunta: Python vs Lua? Cual es la diferencia? ventaja=\r\ns \n  de una&lt;BR&gt;&gt; sobre otra o no?&lt;BR&gt;&gt; &lt;BR&gt;&gt; &lt;BR&gt;&gt; ----- Origin=\r\nal \n  Message -----&lt;BR&gt;&gt; From: &quot;Nahuel Greco&quot; &lt;&lt;A \n  href=3D&quot;mailto:n=\r\nahu@...&quot;&gt;nahu@...&lt;/A&gt;&gt;&lt;BR&gt;&gt; To: &lt;&lt;A \n  href=3D&quot;m=\r\nailto:JuegosAR@...&quot;&gt;JuegosAR@...&lt;/A&gt;&gt;&lt;BR&gt;&=\r\ngt; \n  Sent: Monday, August 26, 2002 2:38 AM&lt;BR&gt;&gt; Subject: Re: [ADVA] RE=\r\n: \n  interfases adaptables din=10&lt;BR&gt;&gt; &lt;BR&gt;&gt; &lt;BR&gt;&gt; &gt; On Sun, 25=\r\n Aug 2002 \n  21:56:45 -0700&lt;BR&gt;&gt; &gt; &quot;Ale Palmero&quot; &lt;&lt;A \n  href=3D&quot;ma=\r\nilto:apalmero@...&quot;&gt;apalmero@...&lt;/A&gt;&gt; \n  wrote:&lt;BR&gt;&gt;=\r\n &gt;&lt;BR&gt;&gt; &gt; &gt; A la vez termin=E9 de leer Code complete y \n  mi gr=\r\nan&lt;BR&gt;&gt; &gt; &gt; duda es si todo esto ( adaptadores entre \n  componente=\r\ns, proxies,&lt;BR&gt;&gt; delegacion,&lt;BR&gt;&gt; &gt; &gt; jerarquias \n  din=E1micas=\r\n ) se aplica a los juegos hoy dia.&lt;BR&gt;&gt; &gt; &gt; No hace mucho \n  que C=\r\narmack predicaba en contra de c++ y que la herencia&lt;BR&gt;&gt; &gt; &gt; \n  mu=\r\nltiple por ejemplo era mala palabra.&lt;BR&gt;&gt; &gt; &gt;&lt;BR&gt;&gt; &gt; &gt; \n =\r\n Segun parece, directx lo est=E1 usando pero no termino de \n  convencerme..=\r\n..&lt;BR&gt;&gt; &gt; &gt;&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; &gt; No le des \n  demasiada bola =\r\na Carmack en lo relativo a arquitectura de&lt;BR&gt;&gt; \n  Software&lt;BR&gt;&gt; &gt;=\r\n (en gral), es mejor en ese campo leer a gente como \n  Martin Fowler o Kent=\r\n&lt;BR&gt;&gt; Beck.&lt;BR&gt;&gt; &gt; Esta bien criticar a C++, pero \n  no tiene much=\r\no sentido cuando la critica&lt;BR&gt;&gt; &gt; apunta a idolatrar a C \n  :)&lt;BR&gt;&g=\r\nt; &gt;&lt;BR&gt;&gt; &gt; \n  &lt;NIGHTLY-PRO-DYNAMIC-LANGUAGES-RANT&gt;&lt;BR&gt;&gt; =\r\n&gt;&lt;BR&gt;&gt; &gt; Con \n  respecto a tu gran duda, justamente, IMHO uno de l=\r\nos problemas para la&lt;BR&gt;&gt; \n  &gt; aplicaci=F3n de esas t=E9cnicas en gam=\r\nes, es que los games se suelen hacer \n  en&lt;BR&gt;&gt; C++,&lt;BR&gt;&gt; &gt; y C++ =\r\nes a pain in the ass en la mayor=EDa de los \n  casos (flames a mi!). Por&lt;BR=\r\n&gt;&gt; &gt; ejemplo, no es lo mismo hacer un Proxy \n  asi:&lt;BR&gt;&gt; &gt;&lt;BR&gt;&=\r\ngt; &gt;&nbsp;&nbsp;&nbsp;&nbsp; class Casita {&lt;BR&gt;&gt; \n  &gt;&nbsp;&nbsp;=\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n  int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=\r\nbsp;&nbsp; num_paredes;&lt;BR&gt;&gt; \n  &gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=\r\n&nbsp;&nbsp; \n  bool&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; made_of_chocolate;=\r\n&lt;BR&gt;&gt; \n  &gt;&nbsp;&nbsp;&nbsp;&nbsp; public:&lt;BR&gt;&gt; \n  &gt;&nbsp;&nbsp=\r\n;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Casita()&nbsp;&nbsp; { \n  (...) }&lt;BR&gt;=\r\n&gt; &gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n  ~Casita()&nbsp=\r\n; { (...) }&lt;BR&gt;&gt; \n  &gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=\r\n dibujar()&nbsp; { (...) \n  }&lt;BR&gt;&gt; &gt; romper()&nbsp;&nbsp; { (...) }&lt;B=\r\nR&gt;&gt; \n  &gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hacerla_de_c=\r\nhocolate() { \n  (...) }&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp;&nbsp; };&lt;BR&gt;&gt; &gt=\r\n;&lt;BR&gt;&gt; \n  &gt;&nbsp;&nbsp;&nbsp;&nbsp; // Notar que me tengo que tomar t=\r\nodo el trabajo \n  de transcribir&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp;&nbsp; // me=\r\ntodo por metodo en el \n  proxy:&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp;&nbsp; class =\r\nProxyACasita {&lt;BR&gt;&gt; \n  &gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=\r\nsp; Casita *casita;&lt;BR&gt;&gt; \n  &gt;&nbsp;&nbsp;&nbsp;&nbsp; public:&lt;BR&gt;&gt;=\r\n \n  &gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Casita() { casita =\r\n=3D new \n  Casita(); } // inicializado aqui para&lt;BR&gt;&gt; \n  &gt;&nbsp;&nbsp=\r\n;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=\r\nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=\r\n;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=\r\nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n  // simplificar&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbs=\r\np;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n  ~Casita() { delete casita; }&lt;BR&gt;&gt; \n =\r\n &gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dibujar() {&lt;BR&gt;&gt; \n=\r\n  &gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=\r\nsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n  casita-&gt;dibujar()=\r\n&lt;BR&gt;&gt; \n  &gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=\r\n;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n  }&lt;BR&gt;&gt; =\r\n&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; romper() \n  {&lt;BR&gt;&gt; =\r\n\n  &gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=\r\nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n  casita-&gt;romper()=\r\n&lt;BR&gt;&gt; \n  &gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=\r\n;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n  }&lt;BR&gt;&gt; =\r\n&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n  hacerla_de_chocolat=\r\ne() {&lt;BR&gt;&gt; \n  &gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=\r\nsp;&nbsp;&nbsp; \n  casita-&gt;hacerla_de_chocolate()&lt;BR&gt;&gt; \n  &gt;&nbsp;&=\r\nnbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=\r\np;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n  }&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp;&=\r\nnbsp; };&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; &gt; Que \n  hacerlo as=ED (python):&lt;BR&gt;&gt; &=\r\ngt;&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp;&nbsp; class \n  Casita:&lt;BR&gt;&gt; &gt;&nbsp=\r\n;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; def \n  __init__(self):&lt;BR&gt;&gt; =\r\n\n  &gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=\r\nbsp; \n  self.num_paredes =3D 2&lt;BR&gt;&gt; \n  &gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=\r\n;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n  self.made_of_chocolate =3D 2=\r\n&lt;BR&gt;&gt; \n  &gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; def \n  dib=\r\nujar(self):&lt;BR&gt;&gt; \n  &gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n  print &quot;Dibujada&quot;&lt;BR&gt;&gt=\r\n; &gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n  def romper(self):=\r\n&lt;BR&gt;&gt; \n  &gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=\r\n;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n  (...)&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbs=\r\np;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; def \n  hacerla_de_chocolate:&lt;BR&gt;&gt; \n  &g=\r\nt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=\r\nnbsp;&nbsp;&nbsp;&nbsp; \n  (...)&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp=\r\n; class Autito:&lt;BR&gt;&gt; \n  &gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=\r\nbsp; def \n  __init__(self):&lt;BR&gt;&gt; \n  &gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=\r\nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n  (...)&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&=\r\nnbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; def \n  orientar(self, grados):&lt;BR&gt;&gt; =\r\n\n  &gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=\r\nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n  print &quot;Orientado&quot;&lt;BR&gt;&gt; \n  &gt;&nbsp;&nbs=\r\np;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=\r\nnbsp;&nbsp; \n  self.orientacion =3D grados&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; &gt; # Ahor=\r\na creo una clase \n  Proxy --Generica--:&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; &gt;&nbsp;&nbs=\r\np;&nbsp;&nbsp; class \n  DebugProxy:&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp;&nbsp;&nb=\r\nsp;&nbsp;&nbsp;&nbsp; def \n  __init__(self,dest):&lt;BR&gt;&gt; \n  &gt;&nbsp;&nbs=\r\np;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n  self.dest=\r\ninatario =3D dest&lt;BR&gt;&gt; \n  &gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=\r\n&nbsp; def __getattr__( self, \n  mensaje):&lt;BR&gt;&gt; \n  &gt;&nbsp;&nbsp;&nbsp=\r\n;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # \n  ejemplo de alg=\r\no que podria hacer&lt;BR&gt;&gt; \n  &gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=\r\n;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n  print mensaje,&quot;fue llamado&quot;&lt;BR&gt;&gt; \n  &=\r\ngt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=\r\n \n  return getattr( self.destinatario, mensaje )&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; &gt; =\r\nSo, \n  luego puedo hacer:&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp;&nbsp;=\r\n \n  &gt;&gt;&gt; una_casita_lejana =3D DebugProxy(Casita())&lt;BR&gt;&gt; \n  &gt;=\r\n&nbsp;&nbsp;&nbsp;&nbsp; &gt;&gt;&gt; una_casita_lejana.dibujar()&lt;BR&gt;&gt; \n=\r\n  &gt;&nbsp;&nbsp;&nbsp;&nbsp; dibujar fue llamado&lt;BR&gt;&gt; \n  &gt;&nbsp;&nb=\r\nsp;&nbsp;&nbsp; Dibujada&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp;&nbsp; \n  &gt;&gt;&g=\r\nt; auto =3D DebugProxy(Autito())&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp;&nbsp; \n  &g=\r\nt;&gt;&gt; auto.orientar(3)&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp;&nbsp; orientar \n=\r\n  fue llamado&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp;&nbsp; Orientado&lt;BR&gt;&gt; \n  &gt=\r\n;&nbsp;&nbsp;&nbsp;&nbsp; &gt;&gt;&gt;&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; &gt; Not=E1 que=\r\n \n  la clase &quot;DebugProxy&quot; es gen=E9rica, solo tuve que hacerla una vez&lt;BR&gt;&=\r\ngt; &gt; \n  para cualquier clase en la que la quiera aplicar. Tampoco tuve =\r\nque \n  tomarme&lt;BR&gt;&gt; &gt; el trabajo de copiar (ni mantener a trav=E9s de=\r\n las \n  versiones) toda la&lt;BR&gt;&gt; interfaz&lt;BR&gt;&gt; &gt; de la clase a la q=\r\nue le \n  quiero proxy&#39;ear las instancias. La interfaz del&lt;BR&gt;&gt; &gt; prox=\r\ny se adapta \n  a cualquier m=E9todo nuevo que le agregue a Casita o Autito.=\r\n&lt;BR&gt;&gt; &gt; No es \n  nada magico ni un caso especial, es natural de pensa=\r\nr que uno puede&lt;BR&gt;&gt; \n  &gt; crear un objeto que simplemente le tira tod=\r\nos los mensajes que le \n  mandan&lt;BR&gt;&gt; &gt; a =E9l a otro objeto. Que C++=\r\n no soporte naturalmente eso es \n  problema de =E9l&lt;BR&gt;&gt; :)&lt;BR&gt;&gt; &gt;=\r\n&lt;BR&gt;&gt; &gt; Siguiendo con esto, pensa \n  en la dificultad inherente a C++=\r\n para usar&lt;BR&gt;&gt; Proxys con&lt;BR&gt;&gt; &gt; \n  objetos que son remotos (est=\r\n=E1n en otra m=E1quina), y a los que no le \n  conoces&lt;BR&gt;&gt; la&lt;BR&gt;&gt; &g=\r\nt; interfaz por adelantado. No es imposible, pero \n  hay que laburarlo, y n=\r\no te&lt;BR&gt;&gt; va a&lt;BR&gt;&gt; &gt; quedar elegante, cuando \n  en un lenguaje di=\r\nn=E1mico no son m=E1s de 15 lineas de&lt;BR&gt;&gt; &gt; code. So, son \n  los lim=\r\nites del C++, COM+ es solo un intento por emparchar&lt;BR&gt;&gt; \n  esos&lt;BR&gt;&gt;=\r\n &gt; downsides del lenguaje.&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; &gt; \n  Obviamente, cuan=\r\ndo codeemos C++, no porque sea m=E1s dif=EDcil/trabajoso \n  vamos&lt;BR&gt;&gt; a=\r\n&lt;BR&gt;&gt; &gt; dejar de &#39;aplicar&#39;, conscientemente o no, los \n  design patte=\r\nrns. Design&lt;BR&gt;&gt; patterns&lt;BR&gt;&gt; &gt; que originalmente fueron \n  pensa=\r\ndos en Smalltalk para formalizar y dar un&lt;BR&gt;&gt; &gt; vocabulario a \n  cos=\r\nas que ya se ven=EDan haciendo (la implementaci=F3n de un&lt;BR&gt;&gt; Proxy \n  =\r\nen&lt;BR&gt;&gt; &gt; ST es &#39;similar&#39; a la que puse anteriormente en py, en el \n =\r\n sentido que es&lt;BR&gt;&gt; &gt; &#39;dinamica&#39;/natural). Usarlos en C++ es como \n =\r\n intentar encastrar un cubo de&lt;BR&gt;&gt; &gt; hierro en un agujero cilindrico=\r\n, \n  pero hay que hacerlo aunque quede todo&lt;BR&gt;&gt; roto&lt;BR&gt;&gt; &gt; y feo=\r\n. \n  Mientras que con los lenguajes din=E1micos no tenemos un cilindro&lt;BR&gt;&=\r\ngt; \n  sino&lt;BR&gt;&gt; &gt; una pelota, pero es de plastilina :)&lt;BR&gt;&gt; &gt;&lt;=\r\nBR&gt;&gt; \n  &gt; So, de usar C++, IMHO hay que intentar minimizar su uso y a=\r\nplicarlo \n  solo&lt;BR&gt;&gt; para&lt;BR&gt;&gt; &gt; lowlevel, y arriba un lenguaje &#39;=\r\nde \n  scripting&#39;/dinamico.&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; &gt; En cuanto a la herenci=\r\na \n  m=FAltiple, el problema conceptual t=EDpico con el que&lt;BR&gt;&gt; te&lt;BR&gt;&=\r\ngt; &gt; \n  podes encontrar es:&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp;=\r\n&nbsp;&nbsp; \n  Humano&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /&nbsp;&n=\r\nbsp;&nbsp; \n  &#92;&lt;BR&gt;&gt; &gt;&nbsp;&nbsp; Mujer&nbsp;&nbsp;&nbsp; Hombre&lt;BR&gt;=\r\n&gt; \n  &gt;&nbsp;&nbsp;&nbsp;&nbsp; &#92;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =\r\n/&lt;BR&gt;&gt; \n  &gt;&nbsp;&nbsp;&nbsp; Hemafrodita&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; &gt; (=\r\nNota, con H.M. \n  el grafo de herencia se te puede complicar mucho m=E1s, e=\r\nste&lt;BR&gt;&gt; es&lt;BR&gt;&gt; \n  &gt; un ejemplo simple, sin H.M. tenes la segurid=\r\nad de que siempre es un \n  tree)&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; &gt; F=EDjate, seg=FA=\r\nn ese gr=E1fico, tanto una Mujer \n  como un Hombre son Humanos, el&lt;BR&gt;&gt; =\r\n&gt; Hemafrodita tambi=E9n lo es, pero en \n  una instancia de Hemafrodita, =\r\ntenemos&lt;BR&gt;&gt; que&lt;BR&gt;&gt; &gt; mantener una o \n  dos instancias de Humano=\r\n? en este caso se podr=EDa resolver&lt;BR&gt;&gt; &gt; \n  manteniendo una sola in=\r\nstancia, pero hay otros casos en donde tenemos \n  que&lt;BR&gt;&gt; &gt; guardar =\r\ndos instancias de la primera clase:&lt;BR&gt;&gt; \n  &gt;&lt;BR&gt;&gt; \n  &gt;&nbsp;&n=\r\nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n  Emplead=\r\no&lt;BR&gt;&gt; \n  &gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=\r\np;&nbsp;&nbsp;&nbsp; \n  /&nbsp;&nbsp; &#92;&lt;BR&gt;&gt; \n  &gt;&nbsp;&nbsp;&nbsp;&n=\r\nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n  Mozo&nbsp;&nbsp; Programador&lt;BR=\r\n&gt;&gt; \n  &gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=\r\nbsp;&nbsp; \n  &#92;&nbsp;&nbsp;&nbsp;&nbsp; /&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp;&nb=\r\nsp; \n  ArgentinoQueNoLlegaAFinDeMes&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; &gt; En este caso,=\r\n Empleado \n  podr=EDa tener una variable que sea&lt;BR&gt;&gt; &quot;lugar_de_trabajo&quot;=\r\n,&lt;BR&gt;&gt; &gt; un \n  Mozo tiene un lugar de trabajo y se lo setea al Emplea=\r\ndo, lo mismo un&lt;BR&gt;&gt; \n  &gt; Programador a Sueldo, pero que pasa con el =\r\ntipo que tiene dos laburos, \n  el&lt;BR&gt;&gt; &gt; ArgentinoQueNoLlegaAFinDeMes=\r\n ? Si tiene una sola instancia de \n  Empleado,&lt;BR&gt;&gt; &gt; entonces va a h=\r\naber conflicto, en este caso se precisan \n  dos instancias de&lt;BR&gt;&gt; &gt; =\r\nEmpleado. (Obviamente, esto se podr=EDa haber \n  armado de otra manera)&lt;BR&gt;=\r\n&gt; &gt;&lt;BR&gt;&gt; &gt; As=ED que para dos formas \n  iguales de herencia, co=\r\nnceptualmente no tenemos&lt;BR&gt;&gt; &gt; una =FAnica \n  soluci=F3n para el pro=\r\nblema de cuantas instancias de la primera&lt;BR&gt;&gt; &gt; \n  clase debemos gua=\r\nrdar, depende del caso.&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; &gt; Adem=E1s, \n  existe otro =\r\nproblema, y es (en el primer ejemplo), que pasa si&lt;BR&gt;&gt; \n  hago&lt;BR&gt;&gt; =\r\n&gt; Hemafrodita.mear()? tiene que mear parado o sentado? Tanto \n  Mujer co=\r\nmo&lt;BR&gt;&gt; Hombre&lt;BR&gt;&gt; &gt; implementan mear() (&#39;virtual&#39; o no en \n  Per=\r\nsona), pero cual tengo que usar&lt;BR&gt;&gt; en&lt;BR&gt;&gt; &gt; este caso? \n  Nueva=\r\nmente, para una misma forma de herencia no hay&lt;BR&gt;&gt; \n  conceptualmente&lt;B=\r\nR&gt;&gt; &gt; un criterio automatico de resoluci=F3n, depende del \n  caso esp=\r\necifico.&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; &gt; Hasta donde conozco, los lenguajes \n  in=\r\ntentan resolver esto de una de estas&lt;BR&gt;&gt; &gt; formas:&lt;BR&gt;&gt; \n  &gt;&lt;B=\r\nR&gt;&gt; &gt; 1- Directamente no permitiendo herencia m=FAltiple&lt;BR&gt;&gt; \n  &=\r\ngt;&lt;BR&gt;&gt; &gt; 2- No permitiendo herencia m=FAltiple pero proveyendo alg=\r\n=FAn \n  tipo de&lt;BR&gt;&gt; mecanismo&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp; para susti=\r\ntuirla \n  (adem=E1s de composici=F3n), como Categor=EDas /&lt;BR&gt;&gt; &gt;&nbs=\r\np;&nbsp;&nbsp; \n  Protocolos/Interfases (algo remotamente similar a las abs=\r\ntract base&lt;BR&gt;&gt; \n  &gt;&nbsp;&nbsp;&nbsp; classes de C++).&lt;BR&gt;&gt; &gt;&lt;=\r\nBR&gt;&gt; \n  &gt;&nbsp;&nbsp;&nbsp; Ej, clase B hereda de A pero a la vez dec=\r\nlara que \n  soporta el protocolo&lt;BR&gt;&gt; C (&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp;=\r\n esto es, una \n  instancia B puede recibir un conjunto C de mensajes&lt;BR&gt;&gt=\r\n; \n  determinado&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp; ). El protocolo/interfase n=\r\no define \n  variables nuevas, solo una &#39;api&#39;.&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; &gt; 3- =\r\nIntentando \n  linearizar el grafo de ancestros, con mayor o menor&lt;BR&gt;&gt; \n=\r\n  &gt;&nbsp;&nbsp;&nbsp; cuidado/warnings sobre las ambig=FCedades (ej, CLO=\r\nS). \n  Seg=FAn el ejemplo&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp; anterior, en Pytho=\r\nn:&lt;BR&gt;&gt; \n  &gt;&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp;&nbsp; class Humano:&lt;BR&gt;&g=\r\nt; \n  &gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; def \n  respirar(=\r\nself):&lt;BR&gt;&gt; \n  &gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=\r\n;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n  pass&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; &g=\r\nt;&nbsp;&nbsp;&nbsp;&nbsp; class \n  Mujer(Humano):&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;=\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n  def mear(self):&lt;BR&gt;&gt; \n  &gt;&nbs=\r\np;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=\r\nnbsp;&nbsp;&nbsp; \n  print &#39;sentada&#39;&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp;&nbsp;&n=\r\nbsp;&nbsp;&nbsp;&nbsp; \n  def be_cute(self):&lt;BR&gt;&gt; \n  &gt;&nbsp;&nbsp;&nb=\r\nsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=\r\n&nbsp; \n  pass&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp;&nbsp; class \n  H=\r\nombre(humano):&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=\r\n \n  def programar(self):&lt;BR&gt;&gt; \n  &gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=\r\n;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n  print &#39;se =\r\nagrando adva y ni una mina&#39;&lt;BR&gt;&gt; \n  &gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=\r\nbsp;&nbsp;&nbsp; def mear(self):&lt;BR&gt;&gt; \n  &gt;&nbsp;&nbsp;&nbsp;&nbsp;&nb=\r\nsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n  pr=\r\nint &#39;parado&#39;&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp;&nbsp; class \n  Hem=\r\nafrodita(Mujer,Hombre):&lt;BR&gt;&gt; \n  &gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=\r\n&nbsp;&nbsp; pass&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; \n  &gt;&nbsp;&nbsp; Entonces:&lt;BR&gt;&gt=\r\n; &gt;&lt;BR&gt;&gt; \n  &gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &gt;=\r\n&gt;&gt; rene =3D \n  Hemafrodita()&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=\r\np;&nbsp;&nbsp;&nbsp; \n  &gt;&gt;&gt; rene.mear()&lt;BR&gt;&gt; \n  &gt;&nbsp;&nbsp=\r\n;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sentada&lt;BR&gt;&gt; \n  &gt;&nbsp;&nbsp;&n=\r\nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &gt;&gt;&gt;&lt;BR&gt;&gt; \n  &gt;&lt;BR&gt;&gt; &gt=\r\n;&nbsp;&nbsp; Y si hubiese sido:&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; \n  &gt;&nbsp;&nbsp;&n=\r\nbsp;&nbsp; class Hemafrodita(Hombre,Mujer):&lt;BR&gt;&gt; \n  &gt;&nbsp;&nbsp;&nbs=\r\np;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pass&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; \n  &gt;&nbsp;&nb=\r\nsp;&nbsp;&nbsp; &gt;&gt;&gt; rene =3D Hemafrodita()&lt;BR&gt;&gt; \n  &gt;&nbsp;&n=\r\nbsp;&nbsp;&nbsp; &gt;&gt;&gt; rene.mear()&lt;BR&gt;&gt; \n  &gt;&nbsp;&nbsp;&nbsp;=\r\n&nbsp; parado&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp;&nbsp; \n  &gt;&gt;&gt;&lt;BR&gt;&gt; =\r\n&gt;&lt;BR&gt;&gt; &gt;&nbsp;&nbsp; Lo que pasa aqui es que \n  &#39;linealiza&#39; el arb=\r\nol de herencia, d=E1ndole&lt;BR&gt;&gt; &gt;&nbsp;&nbsp; m=E1s \n  prioridad a lo =\r\nque se especifico primero al declarar los ancestros&lt;BR&gt;&gt; \n  &gt;&nbsp;&n=\r\nbsp; de cada clase. En el segundo caso, la resoluci=F3n de mensajes \n  qued=\r\na as=ED:&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; &gt;&nbsp;&nbsp;&nbsp;&nbsp; \n  Hemafrodita-&=\r\ngt;Hombre-&gt;Mujer-&gt;Humano&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; \n  &gt;&nbsp;&nbsp; Y p=\r\nor definicion se guarda una sola instancia de \n  Humano.&lt;BR&gt;&gt; &gt;&lt;BR&gt;&g=\r\nt; &gt; Igualmente con los lenguajes que no son \n  fuertemente tipados / qu=\r\ne usan&lt;BR&gt;&gt; dynamic&lt;BR&gt;&gt; &gt; binding, este \n  problema es un poco ba=\r\nstante menos grave, ya que se puede&lt;BR&gt;&gt; usar&lt;BR&gt;&gt; \n  &gt; composicio=\r\nn en vez de H.M. en una mayor cantidad de casos. No se \n  precisa&lt;BR&gt;&gt; &=\r\ngt; declarar a un objeto de una determinada clase para poder \n  mandarle un=\r\n&lt;BR&gt;&gt; mensaje X.&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; &gt; So, IMHO en C++ es \n  conveni=\r\nente no usar H.M. salvo en muy especiales casos,&lt;BR&gt;&gt; &gt; y en los \n  c=\r\nuales hay que intentar que sea con abstract base classes.&lt;BR&gt;&gt; \n  &gt;&lt;B=\r\nR&gt;&gt; &gt; &lt;/RANT&gt;&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; &gt; Ahh.. me desahogu=E9 \n =\r\n :)&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; &gt; - Nahuel \n  Greco&nbsp;&nbsp;&nb=\r\nsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Web \n  Development - Op=\r\nen Source -&lt;BR&gt;&gt; &gt; - &lt;A \n  href=3D&quot;http://www.codenix.com&quot;&gt;http://www=\r\n.codenix.com&lt;/A&gt;&nbsp; Game \n  Programming - Research&nbsp;&nbsp; -&lt;BR&gt;&gt;=\r\n &gt; - Coding / \n  sysadmin&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Networking=\r\n. The answer is 42. \n  -&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; &gt; ADVA - Asociaci=F3n de D=\r\nesarrolladores de \n  Videojuegos Argentina.&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; &gt; &lt;A \n =\r\n href=3D&quot;http://www.adva.com.ar&quot;&gt;www.adva.com.ar&lt;/A&gt;&lt;BR&gt;&gt; &gt; \n  ------=\r\n-------------------------------------------------.&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; \n  =\r\n&gt;&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; &gt; Tu uso de Yahoo! Grupos est=E1 sujeto a \n  l=\r\nas&lt;BR&gt;&gt; &lt;A \n  href=3D&quot;http://ar.docs.yahoo.com/info/utos.html&quot;&gt;http://ar=\r\n.docs.yahoo.com/info/utos.html&lt;/A&gt;&lt;BR&gt;&gt; \n  &gt;&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; &lt;BR=\r\n&gt;&gt; &lt;BR&gt;&gt; ADVA - Asociaci=F3n de \n  Desarrolladores de Videojuegos Arg=\r\nentina.&lt;BR&gt;&gt; &lt;BR&gt;&gt; &lt;A \n  href=3D&quot;http://www.adva.com.ar&quot;&gt;www.adva.com=\r\n.ar&lt;/A&gt;&lt;BR&gt;&gt; \n  -------------------------------------------------------.=\r\n&lt;BR&gt;&gt; &lt;BR&gt;&gt; \n  &nbsp;&lt;BR&gt;&gt; &lt;BR&gt;&gt; Tu uso de Yahoo! Grupos est=E1=\r\n sujeto a las &lt;A \n  href=3D&quot;http://ar.docs.yahoo.com/info/utos.html&quot;&gt;http:/=\r\n/ar.docs.yahoo.com/info/utos.html&lt;/A&gt; \n  &lt;BR&gt;&gt; &lt;/FONT&gt;&lt;BR&gt;&lt;TT&gt;ADVA - Aso=\r\nciaci=F3n de Desarrolladores de Videojuegos \n  Argentina.&lt;BR&gt;&lt;BR&gt;www.adva.c=\r\nom.ar&lt;BR&gt;-------------------------------------------------------.&lt;BR&gt;&lt;BR&gt;&lt;/=\r\nTT&gt;&lt;BR&gt;&lt;BR&gt;&lt;TT&gt;Tu \n  uso de Yahoo! Grupos est=E1 sujeto a las &lt;A \n  href=3D=\r\n&quot;http://ar.docs.yahoo.com/info/utos.html&quot;&gt;Condiciones del servicio de \n  Ya=\r\nhoo!&lt;/A&gt;.&lt;/TT&gt; &lt;BR&gt;&lt;/BLOCKQUOTE&gt;&lt;/BODY&gt;&lt;/HTML&gt;\n\r\n------=_NextPart_000_098D_01C24DC0.9CFEF790--\r\n\n"}}