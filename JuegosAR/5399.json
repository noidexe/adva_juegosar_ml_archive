{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"WELCOME_MSG"}]},{"resourceType":"PHOTO","capabilities":[{"name":"READ"},{"name":"UPLOAD"},{"name":"UPLOADTEMP"}]},{"resourceType":"FILE","capabilities":[{"name":"READ"},{"name":"CREATE"}]},{"resourceType":"MEMBER","capabilities":[{"name":"READ"}]},{"resourceType":"LINK","capabilities":[{"name":"CREATE"},{"name":"READ"}]},{"resourceType":"CALENDAR","capabilities":[{"name":"READ"}]},{"resourceType":"DATABASE","capabilities":[{"name":"READ"},{"name":"READ_DATA"},{"name":"CREATE"}]},{"resourceType":"POLL","capabilities":[{"name":"READ"},{"name":"VOTE"},{"name":"CREATE"}]},{"resourceType":"MESSAGE","capabilities":[{"name":"CREATE"},{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[{"name":"READ"},{"name":"UPLOAD"}]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[{"name":"READ"}]},{"resourceType":"POST","capabilities":[{"name":"READ"},{"name":"CREATE"}]},{"resourceType":"PIN","capabilities":[{"name":"DELETE"},{"name":"UPDATE"},{"name":"READ"},{"name":"CREATE"}]}],"subStatus":"NORMAL","groupUrl":"ar.groups.yahoo.com","intlCode":"ar"},"comscore":"pageview_candidate","ygData":{"userId":109975053,"authorName":"Leonardo Moreno","from":"&quot;Leonardo Moreno&quot; &lt;lgmdp@...&gt;","profile":"gab00ar","replyTo":"LIST","senderId":"m-5xDT3T452zZyrFQi4NvNJ4YouX6rf_SlmWfMsyr8npIlWb9RMhJ5BufhOSId5rdcXAgy2M5DPVQcAgdbMHzPehkpa34fQRX2vcjg","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: interfases adaptables din","postDate":"1030678782","msgId":5399,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDAwMDMwMWMyNGZkNyQ2M2Y3Mjc2MCQwMmQxNDRjOEBwY3dpbmRvd3M+","referencesHeader":"PDEwMzA1OTM3MjcuMzgyLjkxNzAubTEyQGdydXBvc3lhaG9vLmNvbS5hcj4="},"prevInTopic":5387,"nextInTopic":0,"prevInTime":5398,"nextInTime":5400,"topicId":5381,"numMessagesInTopic":3,"msgSnippet":"... http://c2.com/doc/oopsla87.html Anécodata atractiva el abstract... yo hablaba porque toda mi bibliografía concuerda en que el primer libro publicado","rawEmail":"Return-Path: &lt;lgmdp@...&gt;\r\nX-Sender: lgmdp@...\r\nX-Apparently-To: JuegosAR@...\r\nReceived: (EGP: mail-8_1_0_1); 30 Aug 2002 03:33:35 -0000\r\nReceived: (qmail 46596 invoked from network); 30 Aug 2002 03:33:35 -0000\r\nReceived: from unknown (66.218.66.217)\n  by m12.grp.scd.yahoo.com with QMQP; 30 Aug 2002 03:33:35 -0000\r\nReceived: from unknown (HELO frontend01.cg.ifxnetworks.com) (200.62.58.49)\n  by mta2.grp.scd.yahoo.com with SMTP; 30 Aug 2002 03:33:34 -0000\r\nReceived: from [200.68.209.2] (account lgmdp@... HELO pcwindows)\n  by frontend01.cg.ifxnetworks.com (CommuniGate Pro SMTP 3.5.9)\n  with ESMTP id 88324242 for JuegosAR@...; Thu, 29 Aug 2002 23:33:32 -0400\r\nMessage-ID: &lt;000301c24fd7$63f72760$02d144c8@pcwindows&gt;\r\nTo: &lt;JuegosAR@...&gt;\r\nReferences: &lt;1030593727.382.9170.m12@...&gt;\r\nSubject: Re: interfases adaptables din\r\nDate: Fri, 30 Aug 2002 00:39:42 -0300\r\nMIME-Version: 1.0\r\nContent-Type: text/plain;\n\tcharset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: 8bit\r\nX-Priority: 3\r\nX-MSMail-Priority: Normal\r\nX-Mailer: Microsoft Outlook Express 5.00.2615.200\r\nX-MimeOLE: Produced By Microsoft MimeOLE V5.00.2615.200\r\nFrom: &quot;Leonardo Moreno&quot; &lt;lgmdp@...&gt;\r\nX-Yahoo-Group-Post: member; u=109975053\r\nX-Yahoo-Profile: gab00ar\r\n\r\n&gt;  Fecha: Wed, 28 Aug 2002 17:02:11 -0300\n&gt;     De: Nahuel Greco &lt;nahu@...&gt;\n&gt; Asunto: Re: RE: interfases adaptables din\n\n&gt; El abstract del paper de Kent Beck esta aqu�:\nhttp://c2.com/doc/oopsla87.html\n\nAn�codata atractiva el abstract... yo hablaba porque toda mi bibliograf�a\nconcuerda en que el primer libro publicado sobre patrones de dise�o es el de\nGamma.\n\n&gt; (en donde lo que dec�s vale solo para un modelo\n&gt; idealizado de desarrollo en cascada / relevamiento, dise�o,\nimplementaci�n).\n\nNo estoy de acuerdo en que un dise�o flexible no pueda adaptarse ante el\ncambio de requerimientos. Justamente un buen dise�o inicial (inundado de\npatrones) es la base de los frameworks OO, que es la forma en que se\ndesarrollan la mayor�a de los sistemas de cierto tama�o (al menos todos los\nque conozco yo, que no son tantos, por cierto). Y es la forma en que me\ngusta encarar a m� cualquier desarrollo (excepto los peque�os).\n\n&gt; No me refer�a solo a un cambio de versiones entre releases de\naplicaciones,\n&gt; sino a las versiones de desarrollo diarias. Creo que es realista pensar\nque\n&gt; uno no da con la interfaz correcta y final en el primer intento.\n\nSi las interfaces cambian todos los d�as, entonces no hay un dise�o hecho :)\nLa verdad, no s� de ning�n proyecto importante que se haya desarrollado con\ntal grado de improvisaci�n... Creo que es la cr�tica que se le hace a XP,\npor lo que supongo que no debe de existir...\n\n&gt; Si te parece que maliciosamente eleg� justo Proxy, decime un par de\npatterns\n&gt; con su ejemplo en C++ y vemos como quedan en py :)\n\nOk, acepto el desaf�o, s�lo que te cambio la sintaxis de C++ por la de java\n(no tengo el Gamma a mano :) ):\n\nPatr�n de dise�o ReadOnlyObject [Grand98]\nDescripci�n: una clase tiene una instancia de un objeto, al que debe dar\nacceso de solo lectura. Otros objetos pueden leer los atributos de este\nobjeto, pero no pueden cambiarlos.\nMotivaci�n: si el objeto de s�lo lectura es muy grande, hacer una copia cada\nvez que alguien lo necesita es muy costoso. Y la referencia no se le puede\ndar, porque un cliente podr�a modificar el objeto, violando un\nencapsulamiento necesario para garantizar la correctitud del programa.\nEjemplo:\n\npublic class ReadOnlyMonster {\n  protected Pie pieDerecho;\n  protected Pie pieIzquierdo;\n  public Pie getPie() { return pieDerecho; }\n  public Pie getOtroPie() { return pieIzquierdo; }\n}\n\npublic class Hollywood {\n  private KingKong kingKong = new KingKong();\n  public void init() { kingKong.setPies(new Barco(), new Tractor()); }\n  public ReadOnlyMonster getBigMonster() { return kingKong; }\n\n  private class KingKong extends ReadOnlyMonster {\n    public void setPies(Pie pieD, Pie pieI) { pieDerecho = pieD;\npieIzquierdo = pieI; };\n  }\n}\n\nLa verdad es que no s� si algo as� se puede implementar en Python... supongo\nque no, aunque no lo us� lo suficiente. Y sobre la necesidad de este tipo de\ndise�os: en un proyecto con varios programadores, con diferentes habilidades\ny comprensi�n de la arquitectura, hay que dise�ar &quot;a prueba&quot; de\nprogramadores. Y aunque el proyecto sea individual, si dura m�s de un a�o,\ntambi�n hay que dise�arlo a prueba de uno mismo, que siempre estamos\ntentados a &quot;hackear&quot; el c�digo para resolver un problema particular\n(olvid�ndonos de que algo se puede romper, y todos sabemos que Murphy tiene\nraz�n). Me dir�s que no importa que se rompa, porque se arregla... pero si\nhay varios programadores... ya no es tan f�cil... y si vamos a romper una\nclase cada vez que agregamos otra, el incremento de productividad ya no es\ntal.\n\n&gt;&gt; Y si su uso es otro, entonces est� incluido dentro del\n&gt;&gt; dise�o, y puede crearse una superclase gen�rica (para una clase\nparticular),\n&gt;&gt; de modo de tener que actualizar una �nica clase aunque hayamos definido\n100\n&gt;&gt; clases proxy (como en su modalidad decorator).\n\n&gt; Como ser�a eso?\n\nEstoy hablando nada m�s que de una superclase con m�todos por defecto:\n\nclass CienMetodos {\n    Original o;\npublic:\n     virtual void m1() { o-&gt;m1(); };\n     ...\n     virtual void m100() { o-&gt;m100(); };\n}\n\ny despu�s todos los proxies heredan de CienMetodos la implementaci�n por\ndefecto... manteniendo la coherencia entre CienMetodos y Original, los\nproxies quedan bien (excepto el caso en que haya redefinido un m�todo que\ncambi�).\n\n&gt; lo lindo es ver que pasa si acumulas varias de esas\n&gt; herramientas, ver si funcionan bien entre s�, etc. No le veo tanto\nsentido.\n\nHace poco anduve por una empresa que hac�a estas herramientas in-house,\ncasualmente en Smalltalk. Totalmente compatibles, hace falta una nueva, se\nextienden un par de clases y listo. No es complejo. El proceso de\nconstrucci�n (ejecuci�n de las herramientas) tambi�n automatizado con\nscripts.\n\n&gt; Es natural pensar as� en el concepto abstracto de objetos. Cuando me pase\nde\n&gt; C++ a python, y vi que en un framework se utilizaba mucho el pasar clases\npor\n&gt; par�metros, no me gust�, me pareci� que era algo adhoc, que no era\nnatural, que\n&gt; las clases no eran para manipularlas. Pero despu�s me d� cuenta que si uno\n&gt; piensa de manera abstracta, la clase tambi�n es un objeto, y que lo sea te\n&gt; resuelve un mont�n de cosas.\n\nAc� es imposible ponerse de acuerdo. Resuelve un mont�n de cosas, es cierto.\nA m� me gusta m�s Java que C++ en parte por sus propiedades reflexivas (una\nmetaprogramaci�n de s�lo lectura, digamos). Pero creo que utilizar esas\ncaracter�sticas para programar puede hacer que un c�digo largo sea m�s\ndif�cilmente mantenible (y con la volatilidad de requerimientos, el\nmantenimiento es esencial a�n durante el desarrollo). El otro d�a alguien\ncomentaba su idea de un juego en una mansi�n en que la casa cambiaba, se\nmov�an las escaleras con el fin de &quot;volver loco&quot; al jugador. Creo que el\nmismo efecto tendr�a sobre el programador mantener un programa que se cambia\na s� mismo :)\n\n&gt; Plis, explicame por qu� en este punto haces diferencia entre Smalltalk y\n&gt; Python.\n\nIDEs, frameworks OO de base, excelentes para Smalltalk. De python no vi\nmucho, pero lo que vi estaba muy lejos de cualquier entorno Smalltalk.\n\n&gt; adem�s me parece que en los lenguajes din�micos podes inventar muchas\nt�cnicas\n&gt; que a falta de tipado te ayuden en la consistencia de tu programa,\nmientras que\n&gt; a la vez no se si es posible inventar la flexibilidad para un lenguaje que\nes\n&gt; fuertemente tipado\n\nNo s� me ocurre c�mo podr�a el programa asegurarse que el programador no se\nequivoque con lenguajes din�micos... si me pod�s dar una pista te lo\nagradecer�a. Hasta ahora no lo precis� nunca, porque siempre los us� en\ntareas peque�as que pod�a abarcar mentalmente.\n\nY para extender la flexibilidad de un lenguaje fuertemente tipado: pod�s\nembeber un lenguaje din�mico :) Actualmente estoy usando prolog para la IA\nde un sistema que estoy desarrollando en Java. Y voy a incorporar Python\npara darle un lenguaje de scripting al usuario. Y tambi�n pod�s agregar\ngeneradores de c�digo, que yo uso en ese sistema para crear un analizador\nsint�ctico. Se trata de otro design pattern, que creo que todav�a no est�\nformalizado: Eckel lo llam� &quot;Multilenguaje&quot;, y consiste en utilizar para\ncada parte de la aplicaci�n el lenguaje m�s apropiado. Mi decisi�n, para la\narquitectura general de alto nivel, para cualquier sistema de cierto tama�o,\nva a ser siempre (o eso espero :) ) la de un lenguaje fuertemente tipado.\n\nSaludos,\n\n            Leonardo Moreno\n\n\n"}}